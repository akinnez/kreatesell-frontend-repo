// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders a snapshot of <Wallet /> with mock props 1`] = `
<Wallet
  bankDetails={
    Object {
      "account_name": "Salvo Agency Intl",
      "account_number": "02772727272",
      "bank_name": "salvo Bank",
      "country_id": "1",
      "currency": "NGN",
    }
  }
>
  <WalletBalance
    bankDetails={
      Object {
        "account_name": "Salvo Agency Intl",
        "account_number": "02772727272",
        "bank_name": "salvo Bank",
        "country_id": "1",
        "currency": "NGN",
      }
    }
  >
    <header
      className="header"
    >
      <ForwardRef>
        <div
          className="ant-card ant-card-bordered"
        >
          <div
            className="ant-card-body"
            style={Object {}}
          >
            <Spinner>
              <div
                className="spinnerWrapper"
              >
                <div
                  className="spinner"
                />
              </div>
            </Spinner>
          </div>
        </div>
      </ForwardRef>
    </header>
  </WalletBalance>
  <section
    className="filter__section"
  >
    <Title
      level={2}
    >
      <ForwardRef
        component="h2"
      >
        <ResizeObserver
          disabled={true}
          onResize={[Function]}
        >
          <SingleObserver
            disabled={true}
            key="rc-observer-key-0"
            onResize={[Function]}
          >
            <DomWrapper>
              <EllipsisTooltip
                enabledEllipsis={false}
                isEllipsis={false}
              >
                <Typography
                  className=""
                  component="h2"
                  onClick={null}
                  style={
                    Object {
                      "WebkitLineClamp": undefined,
                    }
                  }
                >
                  <h2
                    className="ant-typography"
                    onClick={null}
                    style={
                      Object {
                        "WebkitLineClamp": undefined,
                      }
                    }
                  >
                    <Ellipsis
                      enabledMeasure={false}
                      onEllipsis={[Function]}
                      rows={1}
                      text="Wallet History"
                      width={0}
                    >
                      Wallet History
                    </Ellipsis>
                  </h2>
                </Typography>
              </EllipsisTooltip>
            </DomWrapper>
          </SingleObserver>
        </ResizeObserver>
      </ForwardRef>
    </Title>
    <WalletFilters
      data={Array []}
      searchQuery="description"
      setFiltered={[Function]}
    >
      <div
        className="filterToggle"
      >
        <Button
          onClick={[Function]}
          shape="round"
        >
          <Wave
            disabled={false}
          >
            <button
              className="ant-btn ant-btn-round"
              onClick={[Function]}
              type="button"
            >
              <LoadingIcon
                existIcon={false}
                loading={false}
                prefixCls="ant-btn"
              >
                <CSSMotion
                  motionName="ant-btn-loading-icon-motion"
                  onAppearActive={[Function]}
                  onAppearStart={[Function]}
                  onEnterActive={[Function]}
                  onEnterStart={[Function]}
                  onLeaveActive={[Function]}
                  onLeaveStart={[Function]}
                  removeOnLeave={true}
                  visible={false}
                >
                  <DomWrapper />
                </CSSMotion>
              </LoadingIcon>
              <span
                key=".0"
              >
                Show Filters...
              </span>
            </button>
          </Wave>
        </Button>
      </div>
      <div
        className="filtersContainer"
      >
        <Button
          className="closeFilter"
          icon={<MdOutlineCancel />}
          onClick={[Function]}
          shape="circle"
          type="text"
        >
          <button
            className="ant-btn ant-btn-text ant-btn-circle ant-btn-icon-only closeFilter"
            onClick={[Function]}
            type="button"
          >
            <MdOutlineCancel>
              <IconBase
                attr={
                  Object {
                    "viewBox": "0 0 24 24",
                  }
                }
              >
                <svg
                  fill="currentColor"
                  height="1em"
                  stroke="currentColor"
                  strokeWidth="0"
                  style={
                    Object {
                      "color": undefined,
                    }
                  }
                  viewBox="0 0 24 24"
                  width="1em"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M0 0h24v24H0V0z"
                    fill="none"
                    key="0"
                    opacity=".87"
                  />
                  <path
                    d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8zm3.59-13L12 10.59 8.41 7 7 8.41 10.59 12 7 15.59 8.41 17 12 13.41 15.59 17 17 15.59 13.41 12 17 8.41z"
                    key="1"
                  />
                </svg>
              </IconBase>
            </MdOutlineCancel>
          </button>
        </Button>
        <div
          className="lgMargin"
        >
          <ForwardRef(InternalForm)
            form={
              Object {
                "__INTERNAL__": Object {
                  "itemRef": [Function],
                  "name": "filter_form",
                },
                "getFieldError": [Function],
                "getFieldInstance": [Function],
                "getFieldValue": [Function],
                "getFieldWarning": [Function],
                "getFieldsError": [Function],
                "getFieldsValue": [Function],
                "getInternalHooks": [Function],
                "isFieldTouched": [Function],
                "isFieldValidating": [Function],
                "isFieldsTouched": [Function],
                "isFieldsValidating": [Function],
                "resetFields": [Function],
                "scrollToField": [Function],
                "setFields": [Function],
                "setFieldsValue": [Function],
                "submit": [Function],
                "validateFields": [Function],
              }
            }
            labelCol={
              Object {
                "span": 24,
              }
            }
            name="filter_form"
            onFinish={[Function]}
            size="large"
            wrapperCol={
              Object {
                "span": 24,
              }
            }
          >
            <SizeContextProvider
              size="large"
            >
              <ForwardRef(Form)
                className="ant-form ant-form-horizontal ant-form-large"
                form={
                  Object {
                    "__INTERNAL__": Object {
                      "itemRef": [Function],
                      "name": "filter_form",
                    },
                    "getFieldError": [Function],
                    "getFieldInstance": [Function],
                    "getFieldValue": [Function],
                    "getFieldWarning": [Function],
                    "getFieldsError": [Function],
                    "getFieldsValue": [Function],
                    "getInternalHooks": [Function],
                    "isFieldTouched": [Function],
                    "isFieldValidating": [Function],
                    "isFieldsTouched": [Function],
                    "isFieldsValidating": [Function],
                    "resetFields": [Function],
                    "scrollToField": [Function],
                    "setFields": [Function],
                    "setFieldsValue": [Function],
                    "submit": [Function],
                    "validateFields": [Function],
                  }
                }
                id="filter_form"
                name="filter_form"
                onFinish={[Function]}
                onFinishFailed={[Function]}
              >
                <form
                  className="ant-form ant-form-horizontal ant-form-large"
                  id="filter_form"
                  onReset={[Function]}
                  onSubmit={[Function]}
                >
                  <Row
                    align="bottom"
                    gutter={20}
                    justify="space-between"
                  >
                    <div
                      className="ant-row ant-row-space-between ant-row-bottom"
                      style={
                        Object {
                          "marginLeft": -10,
                          "marginRight": -10,
                        }
                      }
                    >
                      <Col
                        className="input__wrapper"
                        lg={
                          Object {
                            "span": 5,
                          }
                        }
                        xs={
                          Object {
                            "span": 24,
                          }
                        }
                      >
                        <div
                          className="ant-col input__wrapper ant-col-xs-24 ant-col-lg-5"
                          style={
                            Object {
                              "paddingLeft": 10,
                              "paddingRight": 10,
                            }
                          }
                        >
                          <FormItem
                            label="Search"
                            name="search"
                          >
                            <WrapperField
                              label="Search"
                              messageVariables={
                                Object {
                                  "label": "Search",
                                }
                              }
                              name="search"
                              onMetaChange={[Function]}
                              trigger="onChange"
                              validateTrigger="onChange"
                            >
                              <Field
                                fieldContext={
                                  Object {
                                    "__INTERNAL__": Object {
                                      "itemRef": [Function],
                                      "name": "filter_form",
                                    },
                                    "getFieldError": [Function],
                                    "getFieldInstance": [Function],
                                    "getFieldValue": [Function],
                                    "getFieldWarning": [Function],
                                    "getFieldsError": [Function],
                                    "getFieldsValue": [Function],
                                    "getInternalHooks": [Function],
                                    "isFieldTouched": [Function],
                                    "isFieldValidating": [Function],
                                    "isFieldsTouched": [Function],
                                    "isFieldsValidating": [Function],
                                    "resetFields": [Function],
                                    "scrollToField": [Function],
                                    "setFields": [Function],
                                    "setFieldsValue": [Function],
                                    "submit": [Function],
                                    "validateFields": [Function],
                                    "validateTrigger": "onChange",
                                  }
                                }
                                key="_search"
                                label="Search"
                                messageVariables={
                                  Object {
                                    "label": "Search",
                                  }
                                }
                                name={
                                  Array [
                                    "search",
                                  ]
                                }
                                onMetaChange={[Function]}
                                trigger="onChange"
                                validateTrigger="onChange"
                                valuePropName="value"
                              >
                                <Row
                                  className="ant-form-item"
                                  key="row"
                                >
                                  <div
                                    className="ant-row ant-form-item"
                                    style={Object {}}
                                  >
                                    <FormItemLabel
                                      htmlFor="filter_form_search"
                                      label="Search"
                                      name="search"
                                      prefixCls="ant-form"
                                      required={false}
                                      requiredMark={true}
                                    >
                                      <Col
                                        className="ant-form-item-label"
                                        span={24}
                                      >
                                        <div
                                          className="ant-col ant-col-24 ant-form-item-label"
                                          style={Object {}}
                                        >
                                          <label
                                            className=""
                                            htmlFor="filter_form_search"
                                            title="Search"
                                          >
                                            Search
                                          </label>
                                        </div>
                                      </Col>
                                    </FormItemLabel>
                                    <FormItemInput
                                      errors={Array []}
                                      label="Search"
                                      name={Array []}
                                      prefixCls="ant-form"
                                      status=""
                                      touched={false}
                                      validateStatus=""
                                      validating={false}
                                      warnings={Array []}
                                    >
                                      <Col
                                        className="ant-form-item-control"
                                        span={24}
                                      >
                                        <div
                                          className="ant-col ant-col-24 ant-form-item-control"
                                          style={Object {}}
                                        >
                                          <div
                                            className="ant-form-item-control-input"
                                          >
                                            <div
                                              className="ant-form-item-control-input-content"
                                            >
                                              <Component
                                                update={
                                                  <Input
                                                    onChange={[Function]}
                                                    placeholder="Search"
                                                    type="text"
                                                  />
                                                }
                                              >
                                                <Input
                                                  id="filter_form_search"
                                                  onChange={[Function]}
                                                  placeholder="Search"
                                                  type="text"
                                                >
                                                  <ClearableLabeledInput
                                                    bordered={true}
                                                    element={
                                                      <input
                                                        className="ant-input ant-input-lg"
                                                        id="filter_form_search"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        placeholder="Search"
                                                        type="text"
                                                      />
                                                    }
                                                    focused={false}
                                                    handleReset={[Function]}
                                                    id="filter_form_search"
                                                    inputType="input"
                                                    onChange={[Function]}
                                                    placeholder="Search"
                                                    prefixCls="ant-input"
                                                    size="large"
                                                    suffix={null}
                                                    triggerFocus={[Function]}
                                                    type="text"
                                                    value=""
                                                  >
                                                    <input
                                                      className="ant-input ant-input-lg"
                                                      id="filter_form_search"
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      placeholder="Search"
                                                      type="text"
                                                      value=""
                                                    />
                                                  </ClearableLabeledInput>
                                                </Input>
                                              </Component>
                                            </div>
                                          </div>
                                          <ErrorList
                                            className="ant-form-item-explain-connected"
                                            errors={Array []}
                                            helpStatus=""
                                            warnings={Array []}
                                          >
                                            <CSSMotion
                                              motionAppear={false}
                                              motionDeadline={500}
                                              motionEnter={false}
                                              motionName="ant-show-help"
                                              onAppearActive={[Function]}
                                              onAppearEnd={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterEnd={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveEnd={[Function]}
                                              onLeaveStart={[Function]}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </ErrorList>
                                        </div>
                                      </Col>
                                    </FormItemInput>
                                  </div>
                                </Row>
                              </Field>
                            </WrapperField>
                          </FormItem>
                        </div>
                      </Col>
                      <Col
                        className="input__wrapper"
                        lg={
                          Object {
                            "span": 5,
                          }
                        }
                        xs={
                          Object {
                            "span": 24,
                          }
                        }
                      >
                        <div
                          className="ant-col input__wrapper ant-col-xs-24 ant-col-lg-5"
                          style={
                            Object {
                              "paddingLeft": 10,
                              "paddingRight": 10,
                            }
                          }
                        >
                          <FormItem
                            label="Currency"
                            name="currency"
                          >
                            <WrapperField
                              label="Currency"
                              messageVariables={
                                Object {
                                  "label": "Currency",
                                }
                              }
                              name="currency"
                              onMetaChange={[Function]}
                              trigger="onChange"
                              validateTrigger="onChange"
                            >
                              <Field
                                fieldContext={
                                  Object {
                                    "__INTERNAL__": Object {
                                      "itemRef": [Function],
                                      "name": "filter_form",
                                    },
                                    "getFieldError": [Function],
                                    "getFieldInstance": [Function],
                                    "getFieldValue": [Function],
                                    "getFieldWarning": [Function],
                                    "getFieldsError": [Function],
                                    "getFieldsValue": [Function],
                                    "getInternalHooks": [Function],
                                    "isFieldTouched": [Function],
                                    "isFieldValidating": [Function],
                                    "isFieldsTouched": [Function],
                                    "isFieldsValidating": [Function],
                                    "resetFields": [Function],
                                    "scrollToField": [Function],
                                    "setFields": [Function],
                                    "setFieldsValue": [Function],
                                    "submit": [Function],
                                    "validateFields": [Function],
                                    "validateTrigger": "onChange",
                                  }
                                }
                                key="_currency"
                                label="Currency"
                                messageVariables={
                                  Object {
                                    "label": "Currency",
                                  }
                                }
                                name={
                                  Array [
                                    "currency",
                                  ]
                                }
                                onMetaChange={[Function]}
                                trigger="onChange"
                                validateTrigger="onChange"
                                valuePropName="value"
                              >
                                <Row
                                  className="ant-form-item"
                                  key="row"
                                >
                                  <div
                                    className="ant-row ant-form-item"
                                    style={Object {}}
                                  >
                                    <FormItemLabel
                                      htmlFor="filter_form_currency"
                                      label="Currency"
                                      name="currency"
                                      prefixCls="ant-form"
                                      required={false}
                                      requiredMark={true}
                                    >
                                      <Col
                                        className="ant-form-item-label"
                                        span={24}
                                      >
                                        <div
                                          className="ant-col ant-col-24 ant-form-item-label"
                                          style={Object {}}
                                        >
                                          <label
                                            className=""
                                            htmlFor="filter_form_currency"
                                            title="Currency"
                                          >
                                            Currency
                                          </label>
                                        </div>
                                      </Col>
                                    </FormItemLabel>
                                    <FormItemInput
                                      errors={Array []}
                                      label="Currency"
                                      name={Array []}
                                      prefixCls="ant-form"
                                      status=""
                                      touched={false}
                                      validateStatus=""
                                      validating={false}
                                      warnings={Array []}
                                    >
                                      <Col
                                        className="ant-form-item-control"
                                        span={24}
                                      >
                                        <div
                                          className="ant-col ant-col-24 ant-form-item-control"
                                          style={Object {}}
                                        >
                                          <div
                                            className="ant-form-item-control-input"
                                          >
                                            <div
                                              className="ant-form-item-control-input-content"
                                            >
                                              <Component
                                                update={
                                                  <ForwardRef(InternalSelect)
                                                    onChange={[Function]}
                                                    options={
                                                      Array [
                                                        Object {
                                                          "label": "NGN",
                                                          "value": "NGN",
                                                        },
                                                        Object {
                                                          "label": "GHS",
                                                          "value": "GHS",
                                                        },
                                                        Object {
                                                          "label": "KES",
                                                          "value": "KES",
                                                        },
                                                        Object {
                                                          "label": "ZAR",
                                                          "value": "ZAR",
                                                        },
                                                        Object {
                                                          "label": "TZS",
                                                          "value": "TZS",
                                                        },
                                                        Object {
                                                          "label": "UGX",
                                                          "value": "UGX",
                                                        },
                                                        Object {
                                                          "label": "USD",
                                                          "value": "USD",
                                                        },
                                                        Object {
                                                          "label": "GBP",
                                                          "value": "GBP",
                                                        },
                                                      ]
                                                    }
                                                    placeholder="NGN"
                                                  />
                                                }
                                              >
                                                <ForwardRef(InternalSelect)
                                                  id="filter_form_currency"
                                                  onChange={[Function]}
                                                  options={
                                                    Array [
                                                      Object {
                                                        "label": "NGN",
                                                        "value": "NGN",
                                                      },
                                                      Object {
                                                        "label": "GHS",
                                                        "value": "GHS",
                                                      },
                                                      Object {
                                                        "label": "KES",
                                                        "value": "KES",
                                                      },
                                                      Object {
                                                        "label": "ZAR",
                                                        "value": "ZAR",
                                                      },
                                                      Object {
                                                        "label": "TZS",
                                                        "value": "TZS",
                                                      },
                                                      Object {
                                                        "label": "UGX",
                                                        "value": "UGX",
                                                      },
                                                      Object {
                                                        "label": "USD",
                                                        "value": "USD",
                                                      },
                                                      Object {
                                                        "label": "GBP",
                                                        "value": "GBP",
                                                      },
                                                    ]
                                                  }
                                                  placeholder="NGN"
                                                >
                                                  <Select
                                                    className="ant-select-lg"
                                                    clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                    dropdownClassName=""
                                                    id="filter_form_currency"
                                                    inputIcon={[Function]}
                                                    listHeight={256}
                                                    listItemHeight={24}
                                                    menuItemSelectedIcon={null}
                                                    notFoundContent={
                                                      <Context.Consumer>
                                                        [Function]
                                                      </Context.Consumer>
                                                    }
                                                    onChange={[Function]}
                                                    options={
                                                      Array [
                                                        Object {
                                                          "label": "NGN",
                                                          "value": "NGN",
                                                        },
                                                        Object {
                                                          "label": "GHS",
                                                          "value": "GHS",
                                                        },
                                                        Object {
                                                          "label": "KES",
                                                          "value": "KES",
                                                        },
                                                        Object {
                                                          "label": "ZAR",
                                                          "value": "ZAR",
                                                        },
                                                        Object {
                                                          "label": "TZS",
                                                          "value": "TZS",
                                                        },
                                                        Object {
                                                          "label": "UGX",
                                                          "value": "UGX",
                                                        },
                                                        Object {
                                                          "label": "USD",
                                                          "value": "USD",
                                                        },
                                                        Object {
                                                          "label": "GBP",
                                                          "value": "GBP",
                                                        },
                                                      ]
                                                    }
                                                    placeholder="NGN"
                                                    prefixCls="ant-select"
                                                    removeIcon={<ForwardRef(CloseOutlined) />}
                                                    transitionName="ant-slide-up"
                                                  >
                                                    <BaseSelect
                                                      OptionList={
                                                        Object {
                                                          "$$typeof": Symbol(react.forward_ref),
                                                          "render": [Function],
                                                        }
                                                      }
                                                      activeDescendantId="filter_form_currency_list_0"
                                                      activeValue={null}
                                                      className="ant-select-lg"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      displayValues={Array []}
                                                      dropdownClassName=""
                                                      dropdownMatchSelectWidth={true}
                                                      emptyOptions={false}
                                                      id="filter_form_currency"
                                                      inputIcon={[Function]}
                                                      notFoundContent={
                                                        <Context.Consumer>
                                                          [Function]
                                                        </Context.Consumer>
                                                      }
                                                      omitDomProps={
                                                        Array [
                                                          "inputValue",
                                                        ]
                                                      }
                                                      onDisplayValuesChange={[Function]}
                                                      onSearch={[Function]}
                                                      onSearchSplit={[Function]}
                                                      placeholder="NGN"
                                                      prefixCls="ant-select"
                                                      removeIcon={<ForwardRef(CloseOutlined) />}
                                                      searchValue=""
                                                      transitionName="ant-slide-up"
                                                    >
                                                      <div
                                                        className="ant-select ant-select-lg ant-select-single ant-select-show-arrow"
                                                        onBlur={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                      >
                                                        <SelectTrigger
                                                          containerWidth={null}
                                                          dropdownClassName=""
                                                          dropdownMatchSelectWidth={true}
                                                          empty={false}
                                                          getTriggerDOMNode={[Function]}
                                                          onPopupMouseEnter={[Function]}
                                                          popupElement={<OptionList />}
                                                          prefixCls="ant-select"
                                                          transitionName="ant-slide-up"
                                                        >
                                                          <Trigger
                                                            action={Array []}
                                                            afterPopupVisibleChange={[Function]}
                                                            autoDestroy={false}
                                                            blurDelay={0.15}
                                                            builtinPlacements={
                                                              Object {
                                                                "bottomLeft": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 0,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "tl",
                                                                    "bl",
                                                                  ],
                                                                },
                                                                "bottomRight": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 0,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "tr",
                                                                    "br",
                                                                  ],
                                                                },
                                                                "topLeft": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    -4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 0,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "bl",
                                                                    "tl",
                                                                  ],
                                                                },
                                                                "topRight": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    -4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 0,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "br",
                                                                    "tr",
                                                                  ],
                                                                },
                                                              }
                                                            }
                                                            defaultPopupVisible={false}
                                                            destroyPopupOnHide={false}
                                                            focusDelay={0}
                                                            getDocument={[Function]}
                                                            getPopupClassNameFromAlign={[Function]}
                                                            getTriggerDOMNode={[Function]}
                                                            hideAction={Array []}
                                                            mask={false}
                                                            maskClosable={true}
                                                            mouseEnterDelay={0}
                                                            mouseLeaveDelay={0.1}
                                                            onPopupAlign={[Function]}
                                                            onPopupVisibleChange={[Function]}
                                                            popup={
                                                              <div
                                                                onMouseEnter={[Function]}
                                                              >
                                                                <OptionList />
                                                              </div>
                                                            }
                                                            popupAlign={Object {}}
                                                            popupClassName=""
                                                            popupPlacement="bottomLeft"
                                                            popupStyle={
                                                              Object {
                                                                "minWidth": null,
                                                                "width": null,
                                                              }
                                                            }
                                                            popupTransitionName="ant-slide-up"
                                                            prefixCls="ant-select-dropdown"
                                                            showAction={Array []}
                                                          >
                                                            <Selector
                                                              OptionList={
                                                                Object {
                                                                  "$$typeof": Symbol(react.forward_ref),
                                                                  "render": [Function],
                                                                }
                                                              }
                                                              activeDescendantId="filter_form_currency_list_0"
                                                              activeValue={null}
                                                              className="ant-select-lg"
                                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                              displayValues={Array []}
                                                              domRef={
                                                                Object {
                                                                  "current": <div
                                                                    class="ant-select-selector"
                                                                  >
                                                                    <span
                                                                      class="ant-select-selection-search"
                                                                    >
                                                                      <input
                                                                        aria-activedescendant="filter_form_currency_list_0"
                                                                        aria-autocomplete="list"
                                                                        aria-controls="filter_form_currency_list"
                                                                        aria-haspopup="listbox"
                                                                        aria-owns="filter_form_currency_list"
                                                                        autocomplete="off"
                                                                        class="ant-select-selection-search-input"
                                                                        id="filter_form_currency"
                                                                        readonly=""
                                                                        role="combobox"
                                                                        style="opacity: 0;"
                                                                        type="search"
                                                                        unselectable="on"
                                                                        value=""
                                                                      />
                                                                    </span>
                                                                    <span
                                                                      class="ant-select-selection-placeholder"
                                                                    >
                                                                      NGN
                                                                    </span>
                                                                  </div>,
                                                                }
                                                              }
                                                              dropdownClassName=""
                                                              dropdownMatchSelectWidth={true}
                                                              emptyOptions={false}
                                                              id="filter_form_currency"
                                                              inputElement={null}
                                                              inputIcon={[Function]}
                                                              key="trigger"
                                                              notFoundContent={
                                                                <Context.Consumer>
                                                                  [Function]
                                                                </Context.Consumer>
                                                              }
                                                              omitDomProps={
                                                                Array [
                                                                  "inputValue",
                                                                ]
                                                              }
                                                              onDisplayValuesChange={[Function]}
                                                              onRemove={[Function]}
                                                              onSearch={[Function]}
                                                              onSearchSplit={[Function]}
                                                              onSearchSubmit={[Function]}
                                                              onToggleOpen={[Function]}
                                                              placeholder="NGN"
                                                              prefixCls="ant-select"
                                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                                              searchValue=""
                                                              showSearch={false}
                                                              tokenWithEnter={false}
                                                              transitionName="ant-slide-up"
                                                              values={Array []}
                                                            >
                                                              <div
                                                                className="ant-select-selector"
                                                                onClick={[Function]}
                                                                onMouseDown={[Function]}
                                                              >
                                                                <SingleSelector
                                                                  OptionList={
                                                                    Object {
                                                                      "$$typeof": Symbol(react.forward_ref),
                                                                      "render": [Function],
                                                                    }
                                                                  }
                                                                  activeDescendantId="filter_form_currency_list_0"
                                                                  activeValue={null}
                                                                  className="ant-select-lg"
                                                                  clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                                  displayValues={Array []}
                                                                  domRef={
                                                                    Object {
                                                                      "current": <div
                                                                        class="ant-select-selector"
                                                                      >
                                                                        <span
                                                                          class="ant-select-selection-search"
                                                                        >
                                                                          <input
                                                                            aria-activedescendant="filter_form_currency_list_0"
                                                                            aria-autocomplete="list"
                                                                            aria-controls="filter_form_currency_list"
                                                                            aria-haspopup="listbox"
                                                                            aria-owns="filter_form_currency_list"
                                                                            autocomplete="off"
                                                                            class="ant-select-selection-search-input"
                                                                            id="filter_form_currency"
                                                                            readonly=""
                                                                            role="combobox"
                                                                            style="opacity: 0;"
                                                                            type="search"
                                                                            unselectable="on"
                                                                            value=""
                                                                          />
                                                                        </span>
                                                                        <span
                                                                          class="ant-select-selection-placeholder"
                                                                        >
                                                                          NGN
                                                                        </span>
                                                                      </div>,
                                                                    }
                                                                  }
                                                                  dropdownClassName=""
                                                                  dropdownMatchSelectWidth={true}
                                                                  emptyOptions={false}
                                                                  id="filter_form_currency"
                                                                  inputElement={null}
                                                                  inputIcon={[Function]}
                                                                  inputRef={
                                                                    Object {
                                                                      "current": <input
                                                                        aria-activedescendant="filter_form_currency_list_0"
                                                                        aria-autocomplete="list"
                                                                        aria-controls="filter_form_currency_list"
                                                                        aria-haspopup="listbox"
                                                                        aria-owns="filter_form_currency_list"
                                                                        autocomplete="off"
                                                                        class="ant-select-selection-search-input"
                                                                        id="filter_form_currency"
                                                                        readonly=""
                                                                        role="combobox"
                                                                        style="opacity: 0;"
                                                                        type="search"
                                                                        unselectable="on"
                                                                        value=""
                                                                      />,
                                                                    }
                                                                  }
                                                                  notFoundContent={
                                                                    <Context.Consumer>
                                                                      [Function]
                                                                    </Context.Consumer>
                                                                  }
                                                                  omitDomProps={
                                                                    Array [
                                                                      "inputValue",
                                                                    ]
                                                                  }
                                                                  onDisplayValuesChange={[Function]}
                                                                  onInputChange={[Function]}
                                                                  onInputCompositionEnd={[Function]}
                                                                  onInputCompositionStart={[Function]}
                                                                  onInputKeyDown={[Function]}
                                                                  onInputMouseDown={[Function]}
                                                                  onInputPaste={[Function]}
                                                                  onRemove={[Function]}
                                                                  onSearch={[Function]}
                                                                  onSearchSplit={[Function]}
                                                                  onSearchSubmit={[Function]}
                                                                  onToggleOpen={[Function]}
                                                                  placeholder="NGN"
                                                                  prefixCls="ant-select"
                                                                  removeIcon={<ForwardRef(CloseOutlined) />}
                                                                  searchValue=""
                                                                  showSearch={false}
                                                                  tokenWithEnter={false}
                                                                  transitionName="ant-slide-up"
                                                                  values={Array []}
                                                                >
                                                                  <span
                                                                    className="ant-select-selection-search"
                                                                  >
                                                                    <Input
                                                                      activeDescendantId="filter_form_currency_list_0"
                                                                      attrs={Object {}}
                                                                      editable={false}
                                                                      id="filter_form_currency"
                                                                      inputElement={null}
                                                                      onChange={[Function]}
                                                                      onCompositionEnd={[Function]}
                                                                      onCompositionStart={[Function]}
                                                                      onKeyDown={[Function]}
                                                                      onMouseDown={[Function]}
                                                                      onPaste={[Function]}
                                                                      prefixCls="ant-select"
                                                                      value=""
                                                                    >
                                                                      <input
                                                                        aria-activedescendant="filter_form_currency_list_0"
                                                                        aria-autocomplete="list"
                                                                        aria-controls="filter_form_currency_list"
                                                                        aria-haspopup="listbox"
                                                                        aria-owns="filter_form_currency_list"
                                                                        autoComplete="off"
                                                                        className="ant-select-selection-search-input"
                                                                        id="filter_form_currency"
                                                                        onChange={[Function]}
                                                                        onCompositionEnd={[Function]}
                                                                        onCompositionStart={[Function]}
                                                                        onKeyDown={[Function]}
                                                                        onMouseDown={[Function]}
                                                                        onPaste={[Function]}
                                                                        readOnly={true}
                                                                        role="combobox"
                                                                        style={
                                                                          Object {
                                                                            "opacity": 0,
                                                                          }
                                                                        }
                                                                        type="search"
                                                                        unselectable="on"
                                                                        value=""
                                                                      />
                                                                    </Input>
                                                                  </span>
                                                                  <span
                                                                    className="ant-select-selection-placeholder"
                                                                  >
                                                                    NGN
                                                                  </span>
                                                                </SingleSelector>
                                                              </div>
                                                            </Selector>
                                                          </Trigger>
                                                        </SelectTrigger>
                                                        <TransBtn
                                                          className="ant-select-arrow"
                                                          customizeIcon={[Function]}
                                                          customizeIconProps={
                                                            Object {
                                                              "focused": false,
                                                              "loading": undefined,
                                                              "open": undefined,
                                                              "searchValue": "",
                                                              "showSearch": false,
                                                            }
                                                          }
                                                        >
                                                          <span
                                                            aria-hidden={true}
                                                            className="ant-select-arrow"
                                                            onMouseDown={[Function]}
                                                            style={
                                                              Object {
                                                                "WebkitUserSelect": "none",
                                                                "userSelect": "none",
                                                              }
                                                            }
                                                            unselectable="on"
                                                          >
                                                            <ForwardRef(DownOutlined)
                                                              className="ant-select-suffix"
                                                            >
                                                              <AntdIcon
                                                                className="ant-select-suffix"
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "down",
                                                                    "theme": "outlined",
                                                                  }
                                                                }
                                                              >
                                                                <span
                                                                  aria-label="down"
                                                                  className="anticon anticon-down ant-select-suffix"
                                                                  role="img"
                                                                >
                                                                  <IconReact
                                                                    icon={
                                                                      Object {
                                                                        "icon": Object {
                                                                          "attrs": Object {
                                                                            "focusable": "false",
                                                                            "viewBox": "64 64 896 896",
                                                                          },
                                                                          "children": Array [
                                                                            Object {
                                                                              "attrs": Object {
                                                                                "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                              },
                                                                              "tag": "path",
                                                                            },
                                                                          ],
                                                                          "tag": "svg",
                                                                        },
                                                                        "name": "down",
                                                                        "theme": "outlined",
                                                                      }
                                                                    }
                                                                  >
                                                                    <svg
                                                                      aria-hidden="true"
                                                                      data-icon="down"
                                                                      fill="currentColor"
                                                                      focusable="false"
                                                                      height="1em"
                                                                      key="svg-down"
                                                                      viewBox="64 64 896 896"
                                                                      width="1em"
                                                                    >
                                                                      <path
                                                                        d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                        key="svg-down-svg-0"
                                                                      />
                                                                    </svg>
                                                                  </IconReact>
                                                                </span>
                                                              </AntdIcon>
                                                            </ForwardRef(DownOutlined)>
                                                          </span>
                                                        </TransBtn>
                                                      </div>
                                                    </BaseSelect>
                                                  </Select>
                                                </ForwardRef(InternalSelect)>
                                              </Component>
                                            </div>
                                          </div>
                                          <ErrorList
                                            className="ant-form-item-explain-connected"
                                            errors={Array []}
                                            helpStatus=""
                                            warnings={Array []}
                                          >
                                            <CSSMotion
                                              motionAppear={false}
                                              motionDeadline={500}
                                              motionEnter={false}
                                              motionName="ant-show-help"
                                              onAppearActive={[Function]}
                                              onAppearEnd={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterEnd={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveEnd={[Function]}
                                              onLeaveStart={[Function]}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </ErrorList>
                                        </div>
                                      </Col>
                                    </FormItemInput>
                                  </div>
                                </Row>
                              </Field>
                            </WrapperField>
                          </FormItem>
                        </div>
                      </Col>
                      <Col
                        className="input__wrapper"
                        lg={
                          Object {
                            "span": 5,
                          }
                        }
                        xs={
                          Object {
                            "span": 24,
                          }
                        }
                      >
                        <div
                          className="ant-col input__wrapper ant-col-xs-24 ant-col-lg-5"
                          style={
                            Object {
                              "paddingLeft": 10,
                              "paddingRight": 10,
                            }
                          }
                        >
                          <FormItem
                            label="From"
                            name="from"
                          >
                            <WrapperField
                              label="From"
                              messageVariables={
                                Object {
                                  "label": "From",
                                }
                              }
                              name="from"
                              onMetaChange={[Function]}
                              trigger="onChange"
                              validateTrigger="onChange"
                            >
                              <Field
                                fieldContext={
                                  Object {
                                    "__INTERNAL__": Object {
                                      "itemRef": [Function],
                                      "name": "filter_form",
                                    },
                                    "getFieldError": [Function],
                                    "getFieldInstance": [Function],
                                    "getFieldValue": [Function],
                                    "getFieldWarning": [Function],
                                    "getFieldsError": [Function],
                                    "getFieldsValue": [Function],
                                    "getInternalHooks": [Function],
                                    "isFieldTouched": [Function],
                                    "isFieldValidating": [Function],
                                    "isFieldsTouched": [Function],
                                    "isFieldsValidating": [Function],
                                    "resetFields": [Function],
                                    "scrollToField": [Function],
                                    "setFields": [Function],
                                    "setFieldsValue": [Function],
                                    "submit": [Function],
                                    "validateFields": [Function],
                                    "validateTrigger": "onChange",
                                  }
                                }
                                key="_from"
                                label="From"
                                messageVariables={
                                  Object {
                                    "label": "From",
                                  }
                                }
                                name={
                                  Array [
                                    "from",
                                  ]
                                }
                                onMetaChange={[Function]}
                                trigger="onChange"
                                validateTrigger="onChange"
                                valuePropName="value"
                              >
                                <Row
                                  className="ant-form-item"
                                  key="row"
                                >
                                  <div
                                    className="ant-row ant-form-item"
                                    style={Object {}}
                                  >
                                    <FormItemLabel
                                      htmlFor="filter_form_from"
                                      label="From"
                                      name="from"
                                      prefixCls="ant-form"
                                      required={false}
                                      requiredMark={true}
                                    >
                                      <Col
                                        className="ant-form-item-label"
                                        span={24}
                                      >
                                        <div
                                          className="ant-col ant-col-24 ant-form-item-label"
                                          style={Object {}}
                                        >
                                          <label
                                            className=""
                                            htmlFor="filter_form_from"
                                            title="From"
                                          >
                                            From
                                          </label>
                                        </div>
                                      </Col>
                                    </FormItemLabel>
                                    <FormItemInput
                                      errors={Array []}
                                      label="From"
                                      name={Array []}
                                      prefixCls="ant-form"
                                      status=""
                                      touched={false}
                                      validateStatus=""
                                      validating={false}
                                      warnings={Array []}
                                    >
                                      <Col
                                        className="ant-form-item-control"
                                        span={24}
                                      >
                                        <div
                                          className="ant-col ant-col-24 ant-form-item-control"
                                          style={Object {}}
                                        >
                                          <div
                                            className="ant-form-item-control-input"
                                          >
                                            <div
                                              className="ant-form-item-control-input-content"
                                            >
                                              <Component
                                                update={
                                                  <Picker
                                                    allowClear={false}
                                                    onChange={[Function]}
                                                    placeholder="2021-07-22"
                                                  />
                                                }
                                              >
                                                <Picker
                                                  allowClear={false}
                                                  id="filter_form_from"
                                                  onChange={[Function]}
                                                  placeholder="2021-07-22"
                                                >
                                                  <LocaleReceiver
                                                    componentName="DatePicker"
                                                    defaultLocale={
                                                      Object {
                                                        "lang": Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        },
                                                        "timePickerLocale": Object {
                                                          "placeholder": "Select time",
                                                          "rangePlaceholder": Array [
                                                            "Start time",
                                                            "End time",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                  >
                                                    <Picker
                                                      allowClear={false}
                                                      className="ant-picker-large"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      components={
                                                        Object {
                                                          "button": [Function],
                                                          "rangeItem": [Function],
                                                        }
                                                      }
                                                      generateConfig={
                                                        Object {
                                                          "addDate": [Function],
                                                          "addMonth": [Function],
                                                          "addYear": [Function],
                                                          "getDate": [Function],
                                                          "getEndDate": [Function],
                                                          "getFixedDate": [Function],
                                                          "getHour": [Function],
                                                          "getMinute": [Function],
                                                          "getMonth": [Function],
                                                          "getNow": [Function],
                                                          "getSecond": [Function],
                                                          "getWeekDay": [Function],
                                                          "getYear": [Function],
                                                          "isAfter": [Function],
                                                          "isValidate": [Function],
                                                          "locale": Object {
                                                            "format": [Function],
                                                            "getShortMonths": [Function],
                                                            "getShortWeekDays": [Function],
                                                            "getWeek": [Function],
                                                            "getWeekFirstDate": [Function],
                                                            "getWeekFirstDay": [Function],
                                                            "parse": [Function],
                                                          },
                                                          "setDate": [Function],
                                                          "setHour": [Function],
                                                          "setMinute": [Function],
                                                          "setMonth": [Function],
                                                          "setSecond": [Function],
                                                          "setYear": [Function],
                                                        }
                                                      }
                                                      id="filter_form_from"
                                                      locale={
                                                        Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        }
                                                      }
                                                      nextIcon={
                                                        <span
                                                          className="ant-picker-next-icon"
                                                        />
                                                      }
                                                      onChange={[Function]}
                                                      placeholder="2021-07-22"
                                                      prefixCls="ant-picker"
                                                      prevIcon={
                                                        <span
                                                          className="ant-picker-prev-icon"
                                                        />
                                                      }
                                                      showToday={true}
                                                      suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                      superNextIcon={
                                                        <span
                                                          className="ant-picker-super-next-icon"
                                                        />
                                                      }
                                                      superPrevIcon={
                                                        <span
                                                          className="ant-picker-super-prev-icon"
                                                        />
                                                      }
                                                      transitionName="ant-slide-up"
                                                    >
                                                      <InnerPicker
                                                        allowClear={false}
                                                        className="ant-picker-large"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getEndDate": [Function],
                                                            "getFixedDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDate": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="filter_form_from"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="2021-07-22"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        transitionName="ant-slide-up"
                                                      >
                                                        <PickerTrigger
                                                          popupElement={
                                                            <div
                                                              className="ant-picker-panel-container"
                                                              onMouseDown={[Function]}
                                                            >
                                                              <PickerPanel
                                                                allowClear={false}
                                                                className="ant-picker-panel-focused"
                                                                clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                                components={
                                                                  Object {
                                                                    "button": [Function],
                                                                    "rangeItem": [Function],
                                                                  }
                                                                }
                                                                generateConfig={
                                                                  Object {
                                                                    "addDate": [Function],
                                                                    "addMonth": [Function],
                                                                    "addYear": [Function],
                                                                    "getDate": [Function],
                                                                    "getEndDate": [Function],
                                                                    "getFixedDate": [Function],
                                                                    "getHour": [Function],
                                                                    "getMinute": [Function],
                                                                    "getMonth": [Function],
                                                                    "getNow": [Function],
                                                                    "getSecond": [Function],
                                                                    "getWeekDay": [Function],
                                                                    "getYear": [Function],
                                                                    "isAfter": [Function],
                                                                    "isValidate": [Function],
                                                                    "locale": Object {
                                                                      "format": [Function],
                                                                      "getShortMonths": [Function],
                                                                      "getShortWeekDays": [Function],
                                                                      "getWeek": [Function],
                                                                      "getWeekFirstDate": [Function],
                                                                      "getWeekFirstDay": [Function],
                                                                      "parse": [Function],
                                                                    },
                                                                    "setDate": [Function],
                                                                    "setHour": [Function],
                                                                    "setMinute": [Function],
                                                                    "setMonth": [Function],
                                                                    "setSecond": [Function],
                                                                    "setYear": [Function],
                                                                  }
                                                                }
                                                                id="filter_form_from"
                                                                locale={
                                                                  Object {
                                                                    "backToToday": "Back to today",
                                                                    "clear": "Clear",
                                                                    "dateFormat": "M/D/YYYY",
                                                                    "dateSelect": "select date",
                                                                    "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                                    "dayFormat": "D",
                                                                    "decadeSelect": "Choose a decade",
                                                                    "locale": "en_US",
                                                                    "month": "Month",
                                                                    "monthBeforeYear": true,
                                                                    "monthPlaceholder": "Select month",
                                                                    "monthSelect": "Choose a month",
                                                                    "nextCentury": "Next century",
                                                                    "nextDecade": "Next decade",
                                                                    "nextMonth": "Next month (PageDown)",
                                                                    "nextYear": "Next year (Control + right)",
                                                                    "now": "Now",
                                                                    "ok": "Ok",
                                                                    "placeholder": "Select date",
                                                                    "previousCentury": "Last century",
                                                                    "previousDecade": "Last decade",
                                                                    "previousMonth": "Previous month (PageUp)",
                                                                    "previousYear": "Last year (Control + left)",
                                                                    "quarterPlaceholder": "Select quarter",
                                                                    "rangeMonthPlaceholder": Array [
                                                                      "Start month",
                                                                      "End month",
                                                                    ],
                                                                    "rangePlaceholder": Array [
                                                                      "Start date",
                                                                      "End date",
                                                                    ],
                                                                    "rangeWeekPlaceholder": Array [
                                                                      "Start week",
                                                                      "End week",
                                                                    ],
                                                                    "rangeYearPlaceholder": Array [
                                                                      "Start year",
                                                                      "End year",
                                                                    ],
                                                                    "timeSelect": "select time",
                                                                    "today": "Today",
                                                                    "weekPlaceholder": "Select week",
                                                                    "weekSelect": "Choose a week",
                                                                    "year": "Year",
                                                                    "yearFormat": "YYYY",
                                                                    "yearPlaceholder": "Select year",
                                                                    "yearSelect": "Choose a year",
                                                                  }
                                                                }
                                                                nextIcon={
                                                                  <span
                                                                    className="ant-picker-next-icon"
                                                                  />
                                                                }
                                                                onChange={null}
                                                                onPanelChange={[Function]}
                                                                onSelect={[Function]}
                                                                pickerRef={
                                                                  Object {
                                                                    "current": Object {
                                                                      "blur": [Function],
                                                                      "focus": [Function],
                                                                    },
                                                                  }
                                                                }
                                                                placeholder="2021-07-22"
                                                                prefixCls="ant-picker"
                                                                prevIcon={
                                                                  <span
                                                                    className="ant-picker-prev-icon"
                                                                  />
                                                                }
                                                                showToday={true}
                                                                suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                                superNextIcon={
                                                                  <span
                                                                    className="ant-picker-super-next-icon"
                                                                  />
                                                                }
                                                                superPrevIcon={
                                                                  <span
                                                                    className="ant-picker-super-prev-icon"
                                                                  />
                                                                }
                                                                tabIndex={-1}
                                                                transitionName="ant-slide-up"
                                                                value={null}
                                                              />
                                                            </div>
                                                          }
                                                          popupPlacement="bottomLeft"
                                                          prefixCls="ant-picker"
                                                          transitionName="ant-slide-up"
                                                          visible={false}
                                                        >
                                                          <Trigger
                                                            action={Array []}
                                                            afterPopupVisibleChange={[Function]}
                                                            autoDestroy={false}
                                                            blurDelay={0.15}
                                                            builtinPlacements={
                                                              Object {
                                                                "bottomLeft": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 1,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "tl",
                                                                    "bl",
                                                                  ],
                                                                },
                                                                "bottomRight": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 1,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "tr",
                                                                    "br",
                                                                  ],
                                                                },
                                                                "topLeft": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    -4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 0,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "bl",
                                                                    "tl",
                                                                  ],
                                                                },
                                                                "topRight": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    -4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 0,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "br",
                                                                    "tr",
                                                                  ],
                                                                },
                                                              }
                                                            }
                                                            defaultPopupVisible={false}
                                                            destroyPopupOnHide={false}
                                                            focusDelay={0}
                                                            getDocument={[Function]}
                                                            getPopupClassNameFromAlign={[Function]}
                                                            hideAction={Array []}
                                                            mask={false}
                                                            maskClosable={true}
                                                            mouseEnterDelay={0}
                                                            mouseLeaveDelay={0.1}
                                                            onPopupAlign={[Function]}
                                                            onPopupVisibleChange={[Function]}
                                                            popup={
                                                              <div
                                                                className="ant-picker-panel-container"
                                                                onMouseDown={[Function]}
                                                              >
                                                                <PickerPanel
                                                                  allowClear={false}
                                                                  className="ant-picker-panel-focused"
                                                                  clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                                  components={
                                                                    Object {
                                                                      "button": [Function],
                                                                      "rangeItem": [Function],
                                                                    }
                                                                  }
                                                                  generateConfig={
                                                                    Object {
                                                                      "addDate": [Function],
                                                                      "addMonth": [Function],
                                                                      "addYear": [Function],
                                                                      "getDate": [Function],
                                                                      "getEndDate": [Function],
                                                                      "getFixedDate": [Function],
                                                                      "getHour": [Function],
                                                                      "getMinute": [Function],
                                                                      "getMonth": [Function],
                                                                      "getNow": [Function],
                                                                      "getSecond": [Function],
                                                                      "getWeekDay": [Function],
                                                                      "getYear": [Function],
                                                                      "isAfter": [Function],
                                                                      "isValidate": [Function],
                                                                      "locale": Object {
                                                                        "format": [Function],
                                                                        "getShortMonths": [Function],
                                                                        "getShortWeekDays": [Function],
                                                                        "getWeek": [Function],
                                                                        "getWeekFirstDate": [Function],
                                                                        "getWeekFirstDay": [Function],
                                                                        "parse": [Function],
                                                                      },
                                                                      "setDate": [Function],
                                                                      "setHour": [Function],
                                                                      "setMinute": [Function],
                                                                      "setMonth": [Function],
                                                                      "setSecond": [Function],
                                                                      "setYear": [Function],
                                                                    }
                                                                  }
                                                                  id="filter_form_from"
                                                                  locale={
                                                                    Object {
                                                                      "backToToday": "Back to today",
                                                                      "clear": "Clear",
                                                                      "dateFormat": "M/D/YYYY",
                                                                      "dateSelect": "select date",
                                                                      "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                                      "dayFormat": "D",
                                                                      "decadeSelect": "Choose a decade",
                                                                      "locale": "en_US",
                                                                      "month": "Month",
                                                                      "monthBeforeYear": true,
                                                                      "monthPlaceholder": "Select month",
                                                                      "monthSelect": "Choose a month",
                                                                      "nextCentury": "Next century",
                                                                      "nextDecade": "Next decade",
                                                                      "nextMonth": "Next month (PageDown)",
                                                                      "nextYear": "Next year (Control + right)",
                                                                      "now": "Now",
                                                                      "ok": "Ok",
                                                                      "placeholder": "Select date",
                                                                      "previousCentury": "Last century",
                                                                      "previousDecade": "Last decade",
                                                                      "previousMonth": "Previous month (PageUp)",
                                                                      "previousYear": "Last year (Control + left)",
                                                                      "quarterPlaceholder": "Select quarter",
                                                                      "rangeMonthPlaceholder": Array [
                                                                        "Start month",
                                                                        "End month",
                                                                      ],
                                                                      "rangePlaceholder": Array [
                                                                        "Start date",
                                                                        "End date",
                                                                      ],
                                                                      "rangeWeekPlaceholder": Array [
                                                                        "Start week",
                                                                        "End week",
                                                                      ],
                                                                      "rangeYearPlaceholder": Array [
                                                                        "Start year",
                                                                        "End year",
                                                                      ],
                                                                      "timeSelect": "select time",
                                                                      "today": "Today",
                                                                      "weekPlaceholder": "Select week",
                                                                      "weekSelect": "Choose a week",
                                                                      "year": "Year",
                                                                      "yearFormat": "YYYY",
                                                                      "yearPlaceholder": "Select year",
                                                                      "yearSelect": "Choose a year",
                                                                    }
                                                                  }
                                                                  nextIcon={
                                                                    <span
                                                                      className="ant-picker-next-icon"
                                                                    />
                                                                  }
                                                                  onChange={null}
                                                                  onPanelChange={[Function]}
                                                                  onSelect={[Function]}
                                                                  pickerRef={
                                                                    Object {
                                                                      "current": Object {
                                                                        "blur": [Function],
                                                                        "focus": [Function],
                                                                      },
                                                                    }
                                                                  }
                                                                  placeholder="2021-07-22"
                                                                  prefixCls="ant-picker"
                                                                  prevIcon={
                                                                    <span
                                                                      className="ant-picker-prev-icon"
                                                                    />
                                                                  }
                                                                  showToday={true}
                                                                  suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                                  superNextIcon={
                                                                    <span
                                                                      className="ant-picker-super-next-icon"
                                                                    />
                                                                  }
                                                                  superPrevIcon={
                                                                    <span
                                                                      className="ant-picker-super-prev-icon"
                                                                    />
                                                                  }
                                                                  tabIndex={-1}
                                                                  transitionName="ant-slide-up"
                                                                  value={null}
                                                                />
                                                              </div>
                                                            }
                                                            popupAlign={Object {}}
                                                            popupClassName=""
                                                            popupPlacement="bottomLeft"
                                                            popupStyle={Object {}}
                                                            popupTransitionName="ant-slide-up"
                                                            popupVisible={false}
                                                            prefixCls="ant-picker-dropdown"
                                                            showAction={Array []}
                                                          >
                                                            <div
                                                              className="ant-picker ant-picker-large"
                                                              key="trigger"
                                                              onMouseUp={[Function]}
                                                            >
                                                              <div
                                                                className="ant-picker-input"
                                                              >
                                                                <input
                                                                  autoComplete="off"
                                                                  id="filter_form_from"
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onMouseDown={[Function]}
                                                                  placeholder="2021-07-22"
                                                                  readOnly={true}
                                                                  size={12}
                                                                  title=""
                                                                  value=""
                                                                />
                                                                <span
                                                                  className="ant-picker-suffix"
                                                                >
                                                                  <ForwardRef(CalendarOutlined)>
                                                                    <AntdIcon
                                                                      icon={
                                                                        Object {
                                                                          "icon": Object {
                                                                            "attrs": Object {
                                                                              "focusable": "false",
                                                                              "viewBox": "64 64 896 896",
                                                                            },
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                            ],
                                                                            "tag": "svg",
                                                                          },
                                                                          "name": "calendar",
                                                                          "theme": "outlined",
                                                                        }
                                                                      }
                                                                    >
                                                                      <span
                                                                        aria-label="calendar"
                                                                        className="anticon anticon-calendar"
                                                                        role="img"
                                                                      >
                                                                        <IconReact
                                                                          icon={
                                                                            Object {
                                                                              "icon": Object {
                                                                                "attrs": Object {
                                                                                  "focusable": "false",
                                                                                  "viewBox": "64 64 896 896",
                                                                                },
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {
                                                                                      "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                                    },
                                                                                    "tag": "path",
                                                                                  },
                                                                                ],
                                                                                "tag": "svg",
                                                                              },
                                                                              "name": "calendar",
                                                                              "theme": "outlined",
                                                                            }
                                                                          }
                                                                        >
                                                                          <svg
                                                                            aria-hidden="true"
                                                                            data-icon="calendar"
                                                                            fill="currentColor"
                                                                            focusable="false"
                                                                            height="1em"
                                                                            key="svg-calendar"
                                                                            viewBox="64 64 896 896"
                                                                            width="1em"
                                                                          >
                                                                            <path
                                                                              d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                              key="svg-calendar-svg-0"
                                                                            />
                                                                          </svg>
                                                                        </IconReact>
                                                                      </span>
                                                                    </AntdIcon>
                                                                  </ForwardRef(CalendarOutlined)>
                                                                </span>
                                                              </div>
                                                            </div>
                                                          </Trigger>
                                                        </PickerTrigger>
                                                      </InnerPicker>
                                                    </Picker>
                                                  </LocaleReceiver>
                                                </Picker>
                                              </Component>
                                            </div>
                                          </div>
                                          <ErrorList
                                            className="ant-form-item-explain-connected"
                                            errors={Array []}
                                            helpStatus=""
                                            warnings={Array []}
                                          >
                                            <CSSMotion
                                              motionAppear={false}
                                              motionDeadline={500}
                                              motionEnter={false}
                                              motionName="ant-show-help"
                                              onAppearActive={[Function]}
                                              onAppearEnd={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterEnd={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveEnd={[Function]}
                                              onLeaveStart={[Function]}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </ErrorList>
                                        </div>
                                      </Col>
                                    </FormItemInput>
                                  </div>
                                </Row>
                              </Field>
                            </WrapperField>
                          </FormItem>
                        </div>
                      </Col>
                      <Col
                        className="input__wrapper"
                        lg={
                          Object {
                            "span": 5,
                          }
                        }
                        xs={
                          Object {
                            "span": 24,
                          }
                        }
                      >
                        <div
                          className="ant-col input__wrapper ant-col-xs-24 ant-col-lg-5"
                          style={
                            Object {
                              "paddingLeft": 10,
                              "paddingRight": 10,
                            }
                          }
                        >
                          <FormItem
                            label="To"
                            name="to"
                          >
                            <WrapperField
                              label="To"
                              messageVariables={
                                Object {
                                  "label": "To",
                                }
                              }
                              name="to"
                              onMetaChange={[Function]}
                              trigger="onChange"
                              validateTrigger="onChange"
                            >
                              <Field
                                fieldContext={
                                  Object {
                                    "__INTERNAL__": Object {
                                      "itemRef": [Function],
                                      "name": "filter_form",
                                    },
                                    "getFieldError": [Function],
                                    "getFieldInstance": [Function],
                                    "getFieldValue": [Function],
                                    "getFieldWarning": [Function],
                                    "getFieldsError": [Function],
                                    "getFieldsValue": [Function],
                                    "getInternalHooks": [Function],
                                    "isFieldTouched": [Function],
                                    "isFieldValidating": [Function],
                                    "isFieldsTouched": [Function],
                                    "isFieldsValidating": [Function],
                                    "resetFields": [Function],
                                    "scrollToField": [Function],
                                    "setFields": [Function],
                                    "setFieldsValue": [Function],
                                    "submit": [Function],
                                    "validateFields": [Function],
                                    "validateTrigger": "onChange",
                                  }
                                }
                                key="_to"
                                label="To"
                                messageVariables={
                                  Object {
                                    "label": "To",
                                  }
                                }
                                name={
                                  Array [
                                    "to",
                                  ]
                                }
                                onMetaChange={[Function]}
                                trigger="onChange"
                                validateTrigger="onChange"
                                valuePropName="value"
                              >
                                <Row
                                  className="ant-form-item"
                                  key="row"
                                >
                                  <div
                                    className="ant-row ant-form-item"
                                    style={Object {}}
                                  >
                                    <FormItemLabel
                                      htmlFor="filter_form_to"
                                      label="To"
                                      name="to"
                                      prefixCls="ant-form"
                                      required={false}
                                      requiredMark={true}
                                    >
                                      <Col
                                        className="ant-form-item-label"
                                        span={24}
                                      >
                                        <div
                                          className="ant-col ant-col-24 ant-form-item-label"
                                          style={Object {}}
                                        >
                                          <label
                                            className=""
                                            htmlFor="filter_form_to"
                                            title="To"
                                          >
                                            To
                                          </label>
                                        </div>
                                      </Col>
                                    </FormItemLabel>
                                    <FormItemInput
                                      errors={Array []}
                                      label="To"
                                      name={Array []}
                                      prefixCls="ant-form"
                                      status=""
                                      touched={false}
                                      validateStatus=""
                                      validating={false}
                                      warnings={Array []}
                                    >
                                      <Col
                                        className="ant-form-item-control"
                                        span={24}
                                      >
                                        <div
                                          className="ant-col ant-col-24 ant-form-item-control"
                                          style={Object {}}
                                        >
                                          <div
                                            className="ant-form-item-control-input"
                                          >
                                            <div
                                              className="ant-form-item-control-input-content"
                                            >
                                              <Component
                                                update={
                                                  <Picker
                                                    allowClear={false}
                                                    onChange={[Function]}
                                                    placeholder="2021-07-22"
                                                  />
                                                }
                                              >
                                                <Picker
                                                  allowClear={false}
                                                  id="filter_form_to"
                                                  onChange={[Function]}
                                                  placeholder="2021-07-22"
                                                >
                                                  <LocaleReceiver
                                                    componentName="DatePicker"
                                                    defaultLocale={
                                                      Object {
                                                        "lang": Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        },
                                                        "timePickerLocale": Object {
                                                          "placeholder": "Select time",
                                                          "rangePlaceholder": Array [
                                                            "Start time",
                                                            "End time",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                  >
                                                    <Picker
                                                      allowClear={false}
                                                      className="ant-picker-large"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      components={
                                                        Object {
                                                          "button": [Function],
                                                          "rangeItem": [Function],
                                                        }
                                                      }
                                                      generateConfig={
                                                        Object {
                                                          "addDate": [Function],
                                                          "addMonth": [Function],
                                                          "addYear": [Function],
                                                          "getDate": [Function],
                                                          "getEndDate": [Function],
                                                          "getFixedDate": [Function],
                                                          "getHour": [Function],
                                                          "getMinute": [Function],
                                                          "getMonth": [Function],
                                                          "getNow": [Function],
                                                          "getSecond": [Function],
                                                          "getWeekDay": [Function],
                                                          "getYear": [Function],
                                                          "isAfter": [Function],
                                                          "isValidate": [Function],
                                                          "locale": Object {
                                                            "format": [Function],
                                                            "getShortMonths": [Function],
                                                            "getShortWeekDays": [Function],
                                                            "getWeek": [Function],
                                                            "getWeekFirstDate": [Function],
                                                            "getWeekFirstDay": [Function],
                                                            "parse": [Function],
                                                          },
                                                          "setDate": [Function],
                                                          "setHour": [Function],
                                                          "setMinute": [Function],
                                                          "setMonth": [Function],
                                                          "setSecond": [Function],
                                                          "setYear": [Function],
                                                        }
                                                      }
                                                      id="filter_form_to"
                                                      locale={
                                                        Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        }
                                                      }
                                                      nextIcon={
                                                        <span
                                                          className="ant-picker-next-icon"
                                                        />
                                                      }
                                                      onChange={[Function]}
                                                      placeholder="2021-07-22"
                                                      prefixCls="ant-picker"
                                                      prevIcon={
                                                        <span
                                                          className="ant-picker-prev-icon"
                                                        />
                                                      }
                                                      showToday={true}
                                                      suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                      superNextIcon={
                                                        <span
                                                          className="ant-picker-super-next-icon"
                                                        />
                                                      }
                                                      superPrevIcon={
                                                        <span
                                                          className="ant-picker-super-prev-icon"
                                                        />
                                                      }
                                                      transitionName="ant-slide-up"
                                                    >
                                                      <InnerPicker
                                                        allowClear={false}
                                                        className="ant-picker-large"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getEndDate": [Function],
                                                            "getFixedDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDate": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="filter_form_to"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="2021-07-22"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        transitionName="ant-slide-up"
                                                      >
                                                        <PickerTrigger
                                                          popupElement={
                                                            <div
                                                              className="ant-picker-panel-container"
                                                              onMouseDown={[Function]}
                                                            >
                                                              <PickerPanel
                                                                allowClear={false}
                                                                className="ant-picker-panel-focused"
                                                                clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                                components={
                                                                  Object {
                                                                    "button": [Function],
                                                                    "rangeItem": [Function],
                                                                  }
                                                                }
                                                                generateConfig={
                                                                  Object {
                                                                    "addDate": [Function],
                                                                    "addMonth": [Function],
                                                                    "addYear": [Function],
                                                                    "getDate": [Function],
                                                                    "getEndDate": [Function],
                                                                    "getFixedDate": [Function],
                                                                    "getHour": [Function],
                                                                    "getMinute": [Function],
                                                                    "getMonth": [Function],
                                                                    "getNow": [Function],
                                                                    "getSecond": [Function],
                                                                    "getWeekDay": [Function],
                                                                    "getYear": [Function],
                                                                    "isAfter": [Function],
                                                                    "isValidate": [Function],
                                                                    "locale": Object {
                                                                      "format": [Function],
                                                                      "getShortMonths": [Function],
                                                                      "getShortWeekDays": [Function],
                                                                      "getWeek": [Function],
                                                                      "getWeekFirstDate": [Function],
                                                                      "getWeekFirstDay": [Function],
                                                                      "parse": [Function],
                                                                    },
                                                                    "setDate": [Function],
                                                                    "setHour": [Function],
                                                                    "setMinute": [Function],
                                                                    "setMonth": [Function],
                                                                    "setSecond": [Function],
                                                                    "setYear": [Function],
                                                                  }
                                                                }
                                                                id="filter_form_to"
                                                                locale={
                                                                  Object {
                                                                    "backToToday": "Back to today",
                                                                    "clear": "Clear",
                                                                    "dateFormat": "M/D/YYYY",
                                                                    "dateSelect": "select date",
                                                                    "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                                    "dayFormat": "D",
                                                                    "decadeSelect": "Choose a decade",
                                                                    "locale": "en_US",
                                                                    "month": "Month",
                                                                    "monthBeforeYear": true,
                                                                    "monthPlaceholder": "Select month",
                                                                    "monthSelect": "Choose a month",
                                                                    "nextCentury": "Next century",
                                                                    "nextDecade": "Next decade",
                                                                    "nextMonth": "Next month (PageDown)",
                                                                    "nextYear": "Next year (Control + right)",
                                                                    "now": "Now",
                                                                    "ok": "Ok",
                                                                    "placeholder": "Select date",
                                                                    "previousCentury": "Last century",
                                                                    "previousDecade": "Last decade",
                                                                    "previousMonth": "Previous month (PageUp)",
                                                                    "previousYear": "Last year (Control + left)",
                                                                    "quarterPlaceholder": "Select quarter",
                                                                    "rangeMonthPlaceholder": Array [
                                                                      "Start month",
                                                                      "End month",
                                                                    ],
                                                                    "rangePlaceholder": Array [
                                                                      "Start date",
                                                                      "End date",
                                                                    ],
                                                                    "rangeWeekPlaceholder": Array [
                                                                      "Start week",
                                                                      "End week",
                                                                    ],
                                                                    "rangeYearPlaceholder": Array [
                                                                      "Start year",
                                                                      "End year",
                                                                    ],
                                                                    "timeSelect": "select time",
                                                                    "today": "Today",
                                                                    "weekPlaceholder": "Select week",
                                                                    "weekSelect": "Choose a week",
                                                                    "year": "Year",
                                                                    "yearFormat": "YYYY",
                                                                    "yearPlaceholder": "Select year",
                                                                    "yearSelect": "Choose a year",
                                                                  }
                                                                }
                                                                nextIcon={
                                                                  <span
                                                                    className="ant-picker-next-icon"
                                                                  />
                                                                }
                                                                onChange={null}
                                                                onPanelChange={[Function]}
                                                                onSelect={[Function]}
                                                                pickerRef={
                                                                  Object {
                                                                    "current": Object {
                                                                      "blur": [Function],
                                                                      "focus": [Function],
                                                                    },
                                                                  }
                                                                }
                                                                placeholder="2021-07-22"
                                                                prefixCls="ant-picker"
                                                                prevIcon={
                                                                  <span
                                                                    className="ant-picker-prev-icon"
                                                                  />
                                                                }
                                                                showToday={true}
                                                                suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                                superNextIcon={
                                                                  <span
                                                                    className="ant-picker-super-next-icon"
                                                                  />
                                                                }
                                                                superPrevIcon={
                                                                  <span
                                                                    className="ant-picker-super-prev-icon"
                                                                  />
                                                                }
                                                                tabIndex={-1}
                                                                transitionName="ant-slide-up"
                                                                value={null}
                                                              />
                                                            </div>
                                                          }
                                                          popupPlacement="bottomLeft"
                                                          prefixCls="ant-picker"
                                                          transitionName="ant-slide-up"
                                                          visible={false}
                                                        >
                                                          <Trigger
                                                            action={Array []}
                                                            afterPopupVisibleChange={[Function]}
                                                            autoDestroy={false}
                                                            blurDelay={0.15}
                                                            builtinPlacements={
                                                              Object {
                                                                "bottomLeft": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 1,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "tl",
                                                                    "bl",
                                                                  ],
                                                                },
                                                                "bottomRight": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 1,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "tr",
                                                                    "br",
                                                                  ],
                                                                },
                                                                "topLeft": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    -4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 0,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "bl",
                                                                    "tl",
                                                                  ],
                                                                },
                                                                "topRight": Object {
                                                                  "offset": Array [
                                                                    0,
                                                                    -4,
                                                                  ],
                                                                  "overflow": Object {
                                                                    "adjustX": 0,
                                                                    "adjustY": 1,
                                                                  },
                                                                  "points": Array [
                                                                    "br",
                                                                    "tr",
                                                                  ],
                                                                },
                                                              }
                                                            }
                                                            defaultPopupVisible={false}
                                                            destroyPopupOnHide={false}
                                                            focusDelay={0}
                                                            getDocument={[Function]}
                                                            getPopupClassNameFromAlign={[Function]}
                                                            hideAction={Array []}
                                                            mask={false}
                                                            maskClosable={true}
                                                            mouseEnterDelay={0}
                                                            mouseLeaveDelay={0.1}
                                                            onPopupAlign={[Function]}
                                                            onPopupVisibleChange={[Function]}
                                                            popup={
                                                              <div
                                                                className="ant-picker-panel-container"
                                                                onMouseDown={[Function]}
                                                              >
                                                                <PickerPanel
                                                                  allowClear={false}
                                                                  className="ant-picker-panel-focused"
                                                                  clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                                  components={
                                                                    Object {
                                                                      "button": [Function],
                                                                      "rangeItem": [Function],
                                                                    }
                                                                  }
                                                                  generateConfig={
                                                                    Object {
                                                                      "addDate": [Function],
                                                                      "addMonth": [Function],
                                                                      "addYear": [Function],
                                                                      "getDate": [Function],
                                                                      "getEndDate": [Function],
                                                                      "getFixedDate": [Function],
                                                                      "getHour": [Function],
                                                                      "getMinute": [Function],
                                                                      "getMonth": [Function],
                                                                      "getNow": [Function],
                                                                      "getSecond": [Function],
                                                                      "getWeekDay": [Function],
                                                                      "getYear": [Function],
                                                                      "isAfter": [Function],
                                                                      "isValidate": [Function],
                                                                      "locale": Object {
                                                                        "format": [Function],
                                                                        "getShortMonths": [Function],
                                                                        "getShortWeekDays": [Function],
                                                                        "getWeek": [Function],
                                                                        "getWeekFirstDate": [Function],
                                                                        "getWeekFirstDay": [Function],
                                                                        "parse": [Function],
                                                                      },
                                                                      "setDate": [Function],
                                                                      "setHour": [Function],
                                                                      "setMinute": [Function],
                                                                      "setMonth": [Function],
                                                                      "setSecond": [Function],
                                                                      "setYear": [Function],
                                                                    }
                                                                  }
                                                                  id="filter_form_to"
                                                                  locale={
                                                                    Object {
                                                                      "backToToday": "Back to today",
                                                                      "clear": "Clear",
                                                                      "dateFormat": "M/D/YYYY",
                                                                      "dateSelect": "select date",
                                                                      "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                                      "dayFormat": "D",
                                                                      "decadeSelect": "Choose a decade",
                                                                      "locale": "en_US",
                                                                      "month": "Month",
                                                                      "monthBeforeYear": true,
                                                                      "monthPlaceholder": "Select month",
                                                                      "monthSelect": "Choose a month",
                                                                      "nextCentury": "Next century",
                                                                      "nextDecade": "Next decade",
                                                                      "nextMonth": "Next month (PageDown)",
                                                                      "nextYear": "Next year (Control + right)",
                                                                      "now": "Now",
                                                                      "ok": "Ok",
                                                                      "placeholder": "Select date",
                                                                      "previousCentury": "Last century",
                                                                      "previousDecade": "Last decade",
                                                                      "previousMonth": "Previous month (PageUp)",
                                                                      "previousYear": "Last year (Control + left)",
                                                                      "quarterPlaceholder": "Select quarter",
                                                                      "rangeMonthPlaceholder": Array [
                                                                        "Start month",
                                                                        "End month",
                                                                      ],
                                                                      "rangePlaceholder": Array [
                                                                        "Start date",
                                                                        "End date",
                                                                      ],
                                                                      "rangeWeekPlaceholder": Array [
                                                                        "Start week",
                                                                        "End week",
                                                                      ],
                                                                      "rangeYearPlaceholder": Array [
                                                                        "Start year",
                                                                        "End year",
                                                                      ],
                                                                      "timeSelect": "select time",
                                                                      "today": "Today",
                                                                      "weekPlaceholder": "Select week",
                                                                      "weekSelect": "Choose a week",
                                                                      "year": "Year",
                                                                      "yearFormat": "YYYY",
                                                                      "yearPlaceholder": "Select year",
                                                                      "yearSelect": "Choose a year",
                                                                    }
                                                                  }
                                                                  nextIcon={
                                                                    <span
                                                                      className="ant-picker-next-icon"
                                                                    />
                                                                  }
                                                                  onChange={null}
                                                                  onPanelChange={[Function]}
                                                                  onSelect={[Function]}
                                                                  pickerRef={
                                                                    Object {
                                                                      "current": Object {
                                                                        "blur": [Function],
                                                                        "focus": [Function],
                                                                      },
                                                                    }
                                                                  }
                                                                  placeholder="2021-07-22"
                                                                  prefixCls="ant-picker"
                                                                  prevIcon={
                                                                    <span
                                                                      className="ant-picker-prev-icon"
                                                                    />
                                                                  }
                                                                  showToday={true}
                                                                  suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                                  superNextIcon={
                                                                    <span
                                                                      className="ant-picker-super-next-icon"
                                                                    />
                                                                  }
                                                                  superPrevIcon={
                                                                    <span
                                                                      className="ant-picker-super-prev-icon"
                                                                    />
                                                                  }
                                                                  tabIndex={-1}
                                                                  transitionName="ant-slide-up"
                                                                  value={null}
                                                                />
                                                              </div>
                                                            }
                                                            popupAlign={Object {}}
                                                            popupClassName=""
                                                            popupPlacement="bottomLeft"
                                                            popupStyle={Object {}}
                                                            popupTransitionName="ant-slide-up"
                                                            popupVisible={false}
                                                            prefixCls="ant-picker-dropdown"
                                                            showAction={Array []}
                                                          >
                                                            <div
                                                              className="ant-picker ant-picker-large"
                                                              key="trigger"
                                                              onMouseUp={[Function]}
                                                            >
                                                              <div
                                                                className="ant-picker-input"
                                                              >
                                                                <input
                                                                  autoComplete="off"
                                                                  id="filter_form_to"
                                                                  onBlur={[Function]}
                                                                  onChange={[Function]}
                                                                  onFocus={[Function]}
                                                                  onKeyDown={[Function]}
                                                                  onMouseDown={[Function]}
                                                                  placeholder="2021-07-22"
                                                                  readOnly={true}
                                                                  size={12}
                                                                  title=""
                                                                  value=""
                                                                />
                                                                <span
                                                                  className="ant-picker-suffix"
                                                                >
                                                                  <ForwardRef(CalendarOutlined)>
                                                                    <AntdIcon
                                                                      icon={
                                                                        Object {
                                                                          "icon": Object {
                                                                            "attrs": Object {
                                                                              "focusable": "false",
                                                                              "viewBox": "64 64 896 896",
                                                                            },
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                            ],
                                                                            "tag": "svg",
                                                                          },
                                                                          "name": "calendar",
                                                                          "theme": "outlined",
                                                                        }
                                                                      }
                                                                    >
                                                                      <span
                                                                        aria-label="calendar"
                                                                        className="anticon anticon-calendar"
                                                                        role="img"
                                                                      >
                                                                        <IconReact
                                                                          icon={
                                                                            Object {
                                                                              "icon": Object {
                                                                                "attrs": Object {
                                                                                  "focusable": "false",
                                                                                  "viewBox": "64 64 896 896",
                                                                                },
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {
                                                                                      "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                                    },
                                                                                    "tag": "path",
                                                                                  },
                                                                                ],
                                                                                "tag": "svg",
                                                                              },
                                                                              "name": "calendar",
                                                                              "theme": "outlined",
                                                                            }
                                                                          }
                                                                        >
                                                                          <svg
                                                                            aria-hidden="true"
                                                                            data-icon="calendar"
                                                                            fill="currentColor"
                                                                            focusable="false"
                                                                            height="1em"
                                                                            key="svg-calendar"
                                                                            viewBox="64 64 896 896"
                                                                            width="1em"
                                                                          >
                                                                            <path
                                                                              d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                              key="svg-calendar-svg-0"
                                                                            />
                                                                          </svg>
                                                                        </IconReact>
                                                                      </span>
                                                                    </AntdIcon>
                                                                  </ForwardRef(CalendarOutlined)>
                                                                </span>
                                                              </div>
                                                            </div>
                                                          </Trigger>
                                                        </PickerTrigger>
                                                      </InnerPicker>
                                                    </Picker>
                                                  </LocaleReceiver>
                                                </Picker>
                                              </Component>
                                            </div>
                                          </div>
                                          <ErrorList
                                            className="ant-form-item-explain-connected"
                                            errors={Array []}
                                            helpStatus=""
                                            warnings={Array []}
                                          >
                                            <CSSMotion
                                              motionAppear={false}
                                              motionDeadline={500}
                                              motionEnter={false}
                                              motionName="ant-show-help"
                                              onAppearActive={[Function]}
                                              onAppearEnd={[Function]}
                                              onAppearStart={[Function]}
                                              onEnterActive={[Function]}
                                              onEnterEnd={[Function]}
                                              onEnterStart={[Function]}
                                              onLeaveActive={[Function]}
                                              onLeaveEnd={[Function]}
                                              onLeaveStart={[Function]}
                                              visible={false}
                                            >
                                              <DomWrapper />
                                            </CSSMotion>
                                          </ErrorList>
                                        </div>
                                      </Col>
                                    </FormItemInput>
                                  </div>
                                </Row>
                              </Field>
                            </WrapperField>
                          </FormItem>
                        </div>
                      </Col>
                      <Col
                        className="filter__btn"
                        lg={
                          Object {
                            "span": 3,
                          }
                        }
                        xs={
                          Object {
                            "span": 24,
                          }
                        }
                      >
                        <div
                          className="ant-col filter__btn ant-col-xs-24 ant-col-lg-3"
                          style={
                            Object {
                              "paddingLeft": 10,
                              "paddingRight": 10,
                            }
                          }
                        >
                          <FormItem>
                            <Row
                              className="ant-form-item"
                              key="row"
                            >
                              <div
                                className="ant-row ant-form-item"
                                style={Object {}}
                              >
                                <FormItemLabel
                                  prefixCls="ant-form"
                                  requiredMark={true}
                                />
                                <FormItemInput
                                  errors={Array []}
                                  name={Array []}
                                  prefixCls="ant-form"
                                  status=""
                                  touched={false}
                                  validateStatus=""
                                  validating={false}
                                  warnings={Array []}
                                >
                                  <Col
                                    className="ant-form-item-control"
                                    span={24}
                                  >
                                    <div
                                      className="ant-col ant-col-24 ant-form-item-control"
                                      style={Object {}}
                                    >
                                      <div
                                        className="ant-form-item-control-input"
                                      >
                                        <div
                                          className="ant-form-item-control-input-content"
                                        >
                                          <Button
                                            htmlType="submit"
                                            type="primary"
                                          >
                                            <Wave
                                              disabled={false}
                                            >
                                              <button
                                                className="ant-btn ant-btn-primary ant-btn-lg"
                                                onClick={[Function]}
                                                type="submit"
                                              >
                                                <LoadingIcon
                                                  existIcon={false}
                                                  loading={false}
                                                  prefixCls="ant-btn"
                                                >
                                                  <CSSMotion
                                                    motionName="ant-btn-loading-icon-motion"
                                                    onAppearActive={[Function]}
                                                    onAppearStart={[Function]}
                                                    onEnterActive={[Function]}
                                                    onEnterStart={[Function]}
                                                    onLeaveActive={[Function]}
                                                    onLeaveStart={[Function]}
                                                    removeOnLeave={true}
                                                    visible={false}
                                                  >
                                                    <DomWrapper />
                                                  </CSSMotion>
                                                </LoadingIcon>
                                                <_default
                                                  alt="Filter icon"
                                                  height={16}
                                                  key=".0"
                                                  src="/images/FilterIcon.png"
                                                  width={19}
                                                >
                                                  <img
                                                    src="[jest.find('../utils')]"
                                                  />
                                                </_default>
                                                <span
                                                  key=".1"
                                                >
                                                    Filter
                                                </span>
                                              </button>
                                            </Wave>
                                          </Button>
                                        </div>
                                      </div>
                                      <ErrorList
                                        className="ant-form-item-explain-connected"
                                        errors={Array []}
                                        helpStatus=""
                                        warnings={Array []}
                                      >
                                        <CSSMotion
                                          motionAppear={false}
                                          motionDeadline={500}
                                          motionEnter={false}
                                          motionName="ant-show-help"
                                          onAppearActive={[Function]}
                                          onAppearEnd={[Function]}
                                          onAppearStart={[Function]}
                                          onEnterActive={[Function]}
                                          onEnterEnd={[Function]}
                                          onEnterStart={[Function]}
                                          onLeaveActive={[Function]}
                                          onLeaveEnd={[Function]}
                                          onLeaveStart={[Function]}
                                          visible={false}
                                        >
                                          <DomWrapper />
                                        </CSSMotion>
                                      </ErrorList>
                                    </div>
                                  </Col>
                                </FormItemInput>
                              </div>
                            </Row>
                          </FormItem>
                        </div>
                      </Col>
                    </div>
                  </Row>
                </form>
              </ForwardRef(Form)>
            </SizeContextProvider>
          </ForwardRef(InternalForm)>
        </div>
      </div>
    </WalletFilters>
  </section>
  <section>
    <SyncDataToCSV
      data={Array []}
      filename="wallet_history"
      headers={
        Array [
          Object {
            "key": "amount",
            "label": "Amount Withdrawn",
          },
          Object {
            "key": "currency",
            "label": "Currency",
          },
          Object {
            "key": "description",
            "label": "Description",
          },
          Object {
            "key": "withdrawal_date",
            "label": "Withdrawal Date",
          },
          Object {
            "key": "status",
            "label": "Status",
          },
        ]
      }
    >
      <div
        className="csvDataDownload"
      >
        <Button
          type="link"
        >
          <button
            className="ant-btn ant-btn-link"
            onClick={[Function]}
            type="button"
          >
            <LoadingIcon
              existIcon={false}
              loading={false}
              prefixCls="ant-btn"
            >
              <CSSMotion
                motionName="ant-btn-loading-icon-motion"
                onAppearActive={[Function]}
                onAppearStart={[Function]}
                onEnterActive={[Function]}
                onEnterStart={[Function]}
                onLeaveActive={[Function]}
                onLeaveStart={[Function]}
                removeOnLeave={true}
                visible={false}
              >
                <DomWrapper />
              </CSSMotion>
            </LoadingIcon>
            <CSVLink
              asyncOnClick={false}
              data={Array []}
              enclosingCharacter="\\""
              filename="wallet_history.csv"
              headers={
                Array [
                  Object {
                    "key": "amount",
                    "label": "Amount Withdrawn",
                  },
                  Object {
                    "key": "currency",
                    "label": "Currency",
                  },
                  Object {
                    "key": "description",
                    "label": "Description",
                  },
                  Object {
                    "key": "withdrawal_date",
                    "label": "Withdrawal Date",
                  },
                  Object {
                    "key": "status",
                    "label": "Status",
                  },
                ]
              }
              key=".0"
              separator=","
              target="_blank"
              uFEFF={true}
            >
              <a
                download="wallet_history.csv"
                href="data:text/csv;charset=utf-8,﻿\\"Amount Withdrawn\\",\\"Currency\\",\\"Description\\",\\"Withdrawal Date\\",\\"Status\\""
                onClick={[Function]}
                target="_self"
              >
                Export data in CSV  
                <BsDownload>
                  <IconBase
                    attr={
                      Object {
                        "fill": "currentColor",
                        "viewBox": "0 0 16 16",
                      }
                    }
                  >
                    <svg
                      fill="currentColor"
                      height="1em"
                      stroke="currentColor"
                      strokeWidth="0"
                      style={
                        Object {
                          "color": undefined,
                        }
                      }
                      viewBox="0 0 16 16"
                      width="1em"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <path
                        d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z"
                        key="0"
                      />
                      <path
                        d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z"
                        key="1"
                      />
                    </svg>
                  </IconBase>
                </BsDownload>
              </a>
            </CSVLink>
          </button>
        </Button>
      </div>
    </SyncDataToCSV>
  </section>
  <section
    className="table__section"
  >
    <ForwardRef(InternalTable)
      columns={
        Array [
          Object {
            "dataIndex": "amount",
            "title": "Amount Withdrawn",
          },
          Object {
            "dataIndex": "description",
            "title": "Description",
          },
          Object {
            "dataIndex": "date",
            "render": [Function],
            "title": "Withdrawal Date",
          },
          Object {
            "dataIndex": "status",
            "render": [Function],
            "title": "Status",
          },
        ]
      }
      dataSource={Array []}
      loading={true}
      pagination={
        Object {
          "defaultPageSize": 5,
          "position": Array [
            "bottomLeft",
          ],
          "responsive": true,
          "showSizeChanger": false,
        }
      }
      rowKey={[Function]}
    >
      <div
        className="ant-table-wrapper"
      >
        <Spin
          size="default"
          spinning={true}
          wrapperClassName=""
        >
          <div
            className="ant-spin-nested-loading"
          >
            <div
              key="loading"
            >
              <div
                className="ant-spin ant-spin-spinning"
              >
                <span
                  className="ant-spin-dot ant-spin-dot-spin"
                >
                  <i
                    className="ant-spin-dot-item"
                  />
                  <i
                    className="ant-spin-dot-item"
                  />
                  <i
                    className="ant-spin-dot-item"
                  />
                  <i
                    className="ant-spin-dot-item"
                  />
                </span>
              </div>
            </div>
            <div
              className="ant-spin-container ant-spin-blur"
              key="container"
            >
              <Table
                className="ant-table-empty"
                columns={
                  Array [
                    Object {
                      "dataIndex": "amount",
                      "title": "Amount Withdrawn",
                    },
                    Object {
                      "dataIndex": "description",
                      "title": "Description",
                    },
                    Object {
                      "dataIndex": "date",
                      "render": [Function],
                      "title": "Withdrawal Date",
                    },
                    Object {
                      "dataIndex": "status",
                      "render": [Function],
                      "title": "Status",
                    },
                  ]
                }
                data={Array []}
                dataSource={Array []}
                emptyText={
                  <Context.Consumer>
                    [Function]
                  </Context.Consumer>
                }
                expandable={
                  Object {
                    "__PARENT_RENDER_ICON__": undefined,
                    "childrenColumnName": undefined,
                    "expandIcon": [Function],
                    "expandIconColumnIndex": undefined,
                    "indentSize": 15,
                  }
                }
                internalHooks="rc-table-internal-hook"
                internalRefs={
                  Object {
                    "body": Object {
                      "current": <div
                        class="ant-table-content"
                      >
                        <table
                          style="table-layout: auto;"
                        >
                          <colgroup />
                          <thead
                            class="ant-table-thead"
                          >
                            <tr>
                              <th
                                class="ant-table-cell"
                              >
                                Amount Withdrawn
                              </th>
                              <th
                                class="ant-table-cell"
                              >
                                Description
                              </th>
                              <th
                                class="ant-table-cell"
                              >
                                Withdrawal Date
                              </th>
                              <th
                                class="ant-table-cell"
                              >
                                Status
                              </th>
                            </tr>
                          </thead>
                          <tbody
                            class="ant-table-tbody"
                          >
                            <tr
                              class="ant-table-placeholder"
                            >
                              <td
                                class="ant-table-cell"
                                colspan="4"
                              >
                                <div
                                  class="ant-empty ant-empty-normal"
                                >
                                  <div
                                    class="ant-empty-image"
                                  >
                                    <svg
                                      class="ant-empty-img-simple"
                                      height="41"
                                      viewBox="0 0 64 41"
                                      width="64"
                                      xmlns="http://www.w3.org/2000/svg"
                                    >
                                      <g
                                        fill="none"
                                        fill-rule="evenodd"
                                        transform="translate(0 1)"
                                      >
                                        <ellipse
                                          class="ant-empty-img-simple-ellipse"
                                          cx="32"
                                          cy="33"
                                          rx="32"
                                          ry="7"
                                        />
                                        <g
                                          class="ant-empty-img-simple-g"
                                          fill-rule="nonzero"
                                        >
                                          <path
                                            d="M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
                                          />
                                          <path
                                            class="ant-empty-img-simple-path"
                                            d="M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z"
                                          />
                                        </g>
                                      </g>
                                    </svg>
                                  </div>
                                  <div
                                    class="ant-empty-description"
                                  >
                                    No Data
                                  </div>
                                </div>
                              </td>
                            </tr>
                          </tbody>
                        </table>
                      </div>,
                    },
                  }
                }
                loading={true}
                pagination={
                  Object {
                    "defaultPageSize": 5,
                    "position": Array [
                      "bottomLeft",
                    ],
                    "responsive": true,
                    "showSizeChanger": false,
                  }
                }
                prefixCls="ant-table"
                rowClassName={[Function]}
                rowKey={[Function]}
                transformColumns={[Function]}
              >
                <div
                  className="ant-table ant-table-empty"
                >
                  <Component
                    pingLeft={false}
                    pingRight={false}
                    props={
                      Object {
                        "className": "ant-table-empty",
                        "columns": Array [
                          Object {
                            "dataIndex": "amount",
                            "title": "Amount Withdrawn",
                          },
                          Object {
                            "dataIndex": "description",
                            "title": "Description",
                          },
                          Object {
                            "dataIndex": "date",
                            "render": [Function],
                            "title": "Withdrawal Date",
                          },
                          Object {
                            "dataIndex": "status",
                            "render": [Function],
                            "title": "Status",
                          },
                        ],
                        "data": Array [],
                        "dataSource": Array [],
                        "direction": undefined,
                        "emptyText": <Context.Consumer>
                          [Function]
                        </Context.Consumer>,
                        "expandable": Object {
                          "__PARENT_RENDER_ICON__": undefined,
                          "childrenColumnName": undefined,
                          "expandIcon": [Function],
                          "expandIconColumnIndex": undefined,
                          "indentSize": 15,
                        },
                        "internalHooks": "rc-table-internal-hook",
                        "internalRefs": Object {
                          "body": Object {
                            "current": <div
                              class="ant-table-content"
                            >
                              <table
                                style="table-layout: auto;"
                              >
                                <colgroup />
                                <thead
                                  class="ant-table-thead"
                                >
                                  <tr>
                                    <th
                                      class="ant-table-cell"
                                    >
                                      Amount Withdrawn
                                    </th>
                                    <th
                                      class="ant-table-cell"
                                    >
                                      Description
                                    </th>
                                    <th
                                      class="ant-table-cell"
                                    >
                                      Withdrawal Date
                                    </th>
                                    <th
                                      class="ant-table-cell"
                                    >
                                      Status
                                    </th>
                                  </tr>
                                </thead>
                                <tbody
                                  class="ant-table-tbody"
                                >
                                  <tr
                                    class="ant-table-placeholder"
                                  >
                                    <td
                                      class="ant-table-cell"
                                      colspan="4"
                                    >
                                      <div
                                        class="ant-empty ant-empty-normal"
                                      >
                                        <div
                                          class="ant-empty-image"
                                        >
                                          <svg
                                            class="ant-empty-img-simple"
                                            height="41"
                                            viewBox="0 0 64 41"
                                            width="64"
                                            xmlns="http://www.w3.org/2000/svg"
                                          >
                                            <g
                                              fill="none"
                                              fill-rule="evenodd"
                                              transform="translate(0 1)"
                                            >
                                              <ellipse
                                                class="ant-empty-img-simple-ellipse"
                                                cx="32"
                                                cy="33"
                                                rx="32"
                                                ry="7"
                                              />
                                              <g
                                                class="ant-empty-img-simple-g"
                                                fill-rule="nonzero"
                                              >
                                                <path
                                                  d="M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
                                                />
                                                <path
                                                  class="ant-empty-img-simple-path"
                                                  d="M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z"
                                                />
                                              </g>
                                            </g>
                                          </svg>
                                        </div>
                                        <div
                                          class="ant-empty-description"
                                        >
                                          No Data
                                        </div>
                                      </div>
                                    </td>
                                  </tr>
                                </tbody>
                              </table>
                            </div>,
                          },
                        },
                        "loading": true,
                        "mergedExpandedKeys": Set {},
                        "pagination": Object {
                          "defaultPageSize": 5,
                          "position": Array [
                            "bottomLeft",
                          ],
                          "responsive": true,
                          "showSizeChanger": false,
                        },
                        "prefixCls": "ant-table",
                        "rowClassName": [Function],
                        "rowKey": [Function],
                        "stickyOffsets": Object {
                          "left": Array [
                            0,
                            0,
                            0,
                            0,
                          ],
                          "right": Array [
                            0,
                            0,
                            0,
                            0,
                          ],
                        },
                        "transformColumns": [Function],
                      }
                    }
                  >
                    <div
                      className="ant-table-container"
                    >
                      <div
                        className="ant-table-content"
                        onScroll={[Function]}
                        style={Object {}}
                      >
                        <table
                          style={
                            Object {
                              "tableLayout": "auto",
                            }
                          }
                        >
                          <ColGroup
                            colWidths={
                              Array [
                                undefined,
                                undefined,
                                undefined,
                                undefined,
                              ]
                            }
                            columns={
                              Array [
                                Object {
                                  "dataIndex": "amount",
                                  "fixed": undefined,
                                  "title": "Amount Withdrawn",
                                },
                                Object {
                                  "dataIndex": "description",
                                  "fixed": undefined,
                                  "title": "Description",
                                },
                                Object {
                                  "dataIndex": "date",
                                  "fixed": undefined,
                                  "render": [Function],
                                  "title": "Withdrawal Date",
                                },
                                Object {
                                  "dataIndex": "status",
                                  "fixed": undefined,
                                  "render": [Function],
                                  "title": "Status",
                                },
                              ]
                            }
                          >
                            <colgroup />
                          </ColGroup>
                          <Header
                            colWidths={
                              Array [
                                undefined,
                                undefined,
                                undefined,
                                undefined,
                              ]
                            }
                            columCount={4}
                            columns={
                              Array [
                                Object {
                                  "dataIndex": "amount",
                                  "title": "Amount Withdrawn",
                                },
                                Object {
                                  "dataIndex": "description",
                                  "title": "Description",
                                },
                                Object {
                                  "dataIndex": "date",
                                  "render": [Function],
                                  "title": "Withdrawal Date",
                                },
                                Object {
                                  "dataIndex": "status",
                                  "render": [Function],
                                  "title": "Status",
                                },
                              ]
                            }
                            flattenColumns={
                              Array [
                                Object {
                                  "dataIndex": "amount",
                                  "fixed": undefined,
                                  "title": "Amount Withdrawn",
                                },
                                Object {
                                  "dataIndex": "description",
                                  "fixed": undefined,
                                  "title": "Description",
                                },
                                Object {
                                  "dataIndex": "date",
                                  "fixed": undefined,
                                  "render": [Function],
                                  "title": "Withdrawal Date",
                                },
                                Object {
                                  "dataIndex": "status",
                                  "fixed": undefined,
                                  "render": [Function],
                                  "title": "Status",
                                },
                              ]
                            }
                            stickyOffsets={
                              Object {
                                "left": Array [
                                  0,
                                  0,
                                  0,
                                  0,
                                ],
                                "right": Array [
                                  0,
                                  0,
                                  0,
                                  0,
                                ],
                              }
                            }
                          >
                            <thead
                              className="ant-table-thead"
                            >
                              <HeaderRow
                                cellComponent="th"
                                cells={
                                  Array [
                                    Object {
                                      "children": "Amount Withdrawn",
                                      "className": "",
                                      "colEnd": 0,
                                      "colSpan": 1,
                                      "colStart": 0,
                                      "column": Object {
                                        "dataIndex": "amount",
                                        "title": "Amount Withdrawn",
                                      },
                                      "key": undefined,
                                      "rowSpan": 1,
                                    },
                                    Object {
                                      "children": "Description",
                                      "className": "",
                                      "colEnd": 1,
                                      "colSpan": 1,
                                      "colStart": 1,
                                      "column": Object {
                                        "dataIndex": "description",
                                        "title": "Description",
                                      },
                                      "key": undefined,
                                      "rowSpan": 1,
                                    },
                                    Object {
                                      "children": "Withdrawal Date",
                                      "className": "",
                                      "colEnd": 2,
                                      "colSpan": 1,
                                      "colStart": 2,
                                      "column": Object {
                                        "dataIndex": "date",
                                        "render": [Function],
                                        "title": "Withdrawal Date",
                                      },
                                      "key": undefined,
                                      "rowSpan": 1,
                                    },
                                    Object {
                                      "children": "Status",
                                      "className": "",
                                      "colEnd": 3,
                                      "colSpan": 1,
                                      "colStart": 3,
                                      "column": Object {
                                        "dataIndex": "status",
                                        "render": [Function],
                                        "title": "Status",
                                      },
                                      "key": undefined,
                                      "rowSpan": 1,
                                    },
                                  ]
                                }
                                flattenColumns={
                                  Array [
                                    Object {
                                      "dataIndex": "amount",
                                      "fixed": undefined,
                                      "title": "Amount Withdrawn",
                                    },
                                    Object {
                                      "dataIndex": "description",
                                      "fixed": undefined,
                                      "title": "Description",
                                    },
                                    Object {
                                      "dataIndex": "date",
                                      "fixed": undefined,
                                      "render": [Function],
                                      "title": "Withdrawal Date",
                                    },
                                    Object {
                                      "dataIndex": "status",
                                      "fixed": undefined,
                                      "render": [Function],
                                      "title": "Status",
                                    },
                                  ]
                                }
                                index={0}
                                key="0"
                                rowComponent="tr"
                                stickyOffsets={
                                  Object {
                                    "left": Array [
                                      0,
                                      0,
                                      0,
                                      0,
                                    ],
                                    "right": Array [
                                      0,
                                      0,
                                      0,
                                      0,
                                    ],
                                  }
                                }
                              >
                                <tr>
                                  <WrappedCell
                                    className=""
                                    colEnd={0}
                                    colSpan={1}
                                    colStart={0}
                                    column={
                                      Object {
                                        "dataIndex": "amount",
                                        "title": "Amount Withdrawn",
                                      }
                                    }
                                    component="th"
                                    firstFixLeft={false}
                                    firstFixRight={false}
                                    key="amount"
                                    lastFixLeft={false}
                                    lastFixRight={false}
                                    prefixCls="ant-table"
                                    rowSpan={1}
                                    rowType="header"
                                  >
                                    <Cell
                                      className=""
                                      colEnd={0}
                                      colSpan={1}
                                      colStart={0}
                                      column={
                                        Object {
                                          "dataIndex": "amount",
                                          "title": "Amount Withdrawn",
                                        }
                                      }
                                      component="th"
                                      firstFixLeft={false}
                                      firstFixRight={false}
                                      hovering={false}
                                      lastFixLeft={false}
                                      lastFixRight={false}
                                      prefixCls="ant-table"
                                      rowSpan={1}
                                      rowType="header"
                                    >
                                      <th
                                        className="ant-table-cell"
                                        colSpan={null}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        rowSpan={null}
                                        style={Object {}}
                                      >
                                        Amount Withdrawn
                                      </th>
                                    </Cell>
                                  </WrappedCell>
                                  <WrappedCell
                                    className=""
                                    colEnd={1}
                                    colSpan={1}
                                    colStart={1}
                                    column={
                                      Object {
                                        "dataIndex": "description",
                                        "title": "Description",
                                      }
                                    }
                                    component="th"
                                    firstFixLeft={false}
                                    firstFixRight={false}
                                    key="description"
                                    lastFixLeft={false}
                                    lastFixRight={false}
                                    prefixCls="ant-table"
                                    rowSpan={1}
                                    rowType="header"
                                  >
                                    <Cell
                                      className=""
                                      colEnd={1}
                                      colSpan={1}
                                      colStart={1}
                                      column={
                                        Object {
                                          "dataIndex": "description",
                                          "title": "Description",
                                        }
                                      }
                                      component="th"
                                      firstFixLeft={false}
                                      firstFixRight={false}
                                      hovering={false}
                                      lastFixLeft={false}
                                      lastFixRight={false}
                                      prefixCls="ant-table"
                                      rowSpan={1}
                                      rowType="header"
                                    >
                                      <th
                                        className="ant-table-cell"
                                        colSpan={null}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        rowSpan={null}
                                        style={Object {}}
                                      >
                                        Description
                                      </th>
                                    </Cell>
                                  </WrappedCell>
                                  <WrappedCell
                                    className=""
                                    colEnd={2}
                                    colSpan={1}
                                    colStart={2}
                                    column={
                                      Object {
                                        "dataIndex": "date",
                                        "render": [Function],
                                        "title": "Withdrawal Date",
                                      }
                                    }
                                    component="th"
                                    firstFixLeft={false}
                                    firstFixRight={false}
                                    key="date"
                                    lastFixLeft={false}
                                    lastFixRight={false}
                                    prefixCls="ant-table"
                                    rowSpan={1}
                                    rowType="header"
                                  >
                                    <Cell
                                      className=""
                                      colEnd={2}
                                      colSpan={1}
                                      colStart={2}
                                      column={
                                        Object {
                                          "dataIndex": "date",
                                          "render": [Function],
                                          "title": "Withdrawal Date",
                                        }
                                      }
                                      component="th"
                                      firstFixLeft={false}
                                      firstFixRight={false}
                                      hovering={false}
                                      lastFixLeft={false}
                                      lastFixRight={false}
                                      prefixCls="ant-table"
                                      rowSpan={1}
                                      rowType="header"
                                    >
                                      <th
                                        className="ant-table-cell"
                                        colSpan={null}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        rowSpan={null}
                                        style={Object {}}
                                      >
                                        Withdrawal Date
                                      </th>
                                    </Cell>
                                  </WrappedCell>
                                  <WrappedCell
                                    className=""
                                    colEnd={3}
                                    colSpan={1}
                                    colStart={3}
                                    column={
                                      Object {
                                        "dataIndex": "status",
                                        "render": [Function],
                                        "title": "Status",
                                      }
                                    }
                                    component="th"
                                    firstFixLeft={false}
                                    firstFixRight={false}
                                    key="status"
                                    lastFixLeft={false}
                                    lastFixRight={false}
                                    prefixCls="ant-table"
                                    rowSpan={1}
                                    rowType="header"
                                  >
                                    <Cell
                                      className=""
                                      colEnd={3}
                                      colSpan={1}
                                      colStart={3}
                                      column={
                                        Object {
                                          "dataIndex": "status",
                                          "render": [Function],
                                          "title": "Status",
                                        }
                                      }
                                      component="th"
                                      firstFixLeft={false}
                                      firstFixRight={false}
                                      hovering={false}
                                      lastFixLeft={false}
                                      lastFixRight={false}
                                      prefixCls="ant-table"
                                      rowSpan={1}
                                      rowType="header"
                                    >
                                      <th
                                        className="ant-table-cell"
                                        colSpan={null}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        rowSpan={null}
                                        style={Object {}}
                                      >
                                        Status
                                      </th>
                                    </Cell>
                                  </WrappedCell>
                                </tr>
                              </HeaderRow>
                            </thead>
                          </Header>
                          <Body
                            childrenColumnName="children"
                            data={Array []}
                            emptyNode={
                              <Context.Consumer>
                                [Function]
                              </Context.Consumer>
                            }
                            expandedKeys={Set {}}
                            getRowKey={[Function]}
                            measureColumnWidth={false}
                          >
                            <tbody
                              className="ant-table-tbody"
                            >
                              <ExpandedRow
                                cellComponent="td"
                                className="ant-table-placeholder"
                                colSpan={4}
                                component="tr"
                                expanded={true}
                                isEmpty={true}
                                prefixCls="ant-table"
                              >
                                <tr
                                  className="ant-table-placeholder"
                                  style={
                                    Object {
                                      "display": null,
                                    }
                                  }
                                >
                                  <WrappedCell
                                    colSpan={4}
                                    component="td"
                                    prefixCls="ant-table"
                                  >
                                    <Cell
                                      colSpan={4}
                                      component="td"
                                      hovering={false}
                                      onHover={[Function]}
                                      prefixCls="ant-table"
                                    >
                                      <td
                                        className="ant-table-cell"
                                        colSpan={4}
                                        onMouseEnter={[Function]}
                                        onMouseLeave={[Function]}
                                        rowSpan={null}
                                        style={Object {}}
                                      >
                                        <Empty
                                          image={<Simple />}
                                        >
                                          <LocaleReceiver
                                            componentName="Empty"
                                          >
                                            <div
                                              className="ant-empty ant-empty-normal"
                                            >
                                              <div
                                                className="ant-empty-image"
                                              >
                                                <Simple>
                                                  <svg
                                                    className="ant-empty-img-simple"
                                                    height="41"
                                                    viewBox="0 0 64 41"
                                                    width="64"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                  >
                                                    <g
                                                      fill="none"
                                                      fillRule="evenodd"
                                                      transform="translate(0 1)"
                                                    >
                                                      <ellipse
                                                        className="ant-empty-img-simple-ellipse"
                                                        cx="32"
                                                        cy="33"
                                                        rx="32"
                                                        ry="7"
                                                      />
                                                      <g
                                                        className="ant-empty-img-simple-g"
                                                        fillRule="nonzero"
                                                      >
                                                        <path
                                                          d="M55 12.76L44.854 1.258C44.367.474 43.656 0 42.907 0H21.093c-.749 0-1.46.474-1.947 1.257L9 12.761V22h46v-9.24z"
                                                        />
                                                        <path
                                                          className="ant-empty-img-simple-path"
                                                          d="M41.613 15.931c0-1.605.994-2.93 2.227-2.931H55v18.137C55 33.26 53.68 35 52.05 35h-40.1C10.32 35 9 33.259 9 31.137V13h11.16c1.233 0 2.227 1.323 2.227 2.928v.022c0 1.605 1.005 2.901 2.237 2.901h14.752c1.232 0 2.237-1.308 2.237-2.913v-.007z"
                                                        />
                                                      </g>
                                                    </g>
                                                  </svg>
                                                </Simple>
                                              </div>
                                              <div
                                                className="ant-empty-description"
                                              >
                                                No Data
                                              </div>
                                            </div>
                                          </LocaleReceiver>
                                        </Empty>
                                      </td>
                                    </Cell>
                                  </WrappedCell>
                                </tr>
                              </ExpandedRow>
                            </tbody>
                          </Body>
                        </table>
                      </div>
                    </div>
                  </Component>
                </div>
              </Table>
            </div>
          </div>
        </Spin>
      </div>
    </ForwardRef(InternalTable)>
  </section>
</Wallet>
`;
