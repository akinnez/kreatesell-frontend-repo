// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders a snapshot of <CustomCheckoutSelect /> with mock props 1`] = `
<CustomCheckoutSelect
  field={
    Array [
      Object {
        "amount": 300,
        "currency": "NGN",
      },
      Object {
        "amount": 400,
        "currency": "GHC",
      },
    ]
  }
  setField={[MockFunction]}
  title="mockTitle"
>
  <div
    className=""
  >
    <p
      className="text-base mb-2 font-medium"
    >
      mockTitle
    </p>
    <div
      className="w-4/5 flex"
    >
      <ForwardRef(InternalSelect)
        className="selectButton"
        defaultValue="NGN"
        onChange={[Function]}
      >
        <Select
          className="selectButton"
          clearIcon={<ForwardRef(CloseCircleFilled) />}
          defaultValue="NGN"
          dropdownClassName=""
          inputIcon={[Function]}
          listHeight={256}
          listItemHeight={24}
          menuItemSelectedIcon={null}
          notFoundContent={
            <Context.Consumer>
              [Function]
            </Context.Consumer>
          }
          onChange={[Function]}
          prefixCls="ant-select"
          removeIcon={<ForwardRef(CloseOutlined) />}
          transitionName="ant-slide-up"
        >
          <BaseSelect
            OptionList={
              Object {
                "$$typeof": Symbol(react.forward_ref),
                "render": [Function],
              }
            }
            activeDescendantId="rc_select_TEST_OR_SSR_list_0"
            activeValue={null}
            className="selectButton"
            clearIcon={<ForwardRef(CloseCircleFilled) />}
            displayValues={
              Array [
                Object {
                  "disabled": undefined,
                  "key": "NGN",
                  "label": "NGN",
                  "value": "NGN",
                },
              ]
            }
            dropdownClassName=""
            dropdownMatchSelectWidth={true}
            emptyOptions={false}
            id="rc_select_TEST_OR_SSR"
            inputIcon={[Function]}
            notFoundContent={
              <Context.Consumer>
                [Function]
              </Context.Consumer>
            }
            omitDomProps={
              Array [
                "inputValue",
              ]
            }
            onDisplayValuesChange={[Function]}
            onSearch={[Function]}
            onSearchSplit={[Function]}
            prefixCls="ant-select"
            removeIcon={<ForwardRef(CloseOutlined) />}
            searchValue=""
            transitionName="ant-slide-up"
          >
            <div
              className="ant-select selectButton ant-select-single ant-select-show-arrow"
              onBlur={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              onKeyUp={[Function]}
              onMouseDown={[Function]}
            >
              <SelectTrigger
                containerWidth={null}
                dropdownClassName=""
                dropdownMatchSelectWidth={true}
                empty={false}
                getTriggerDOMNode={[Function]}
                onPopupMouseEnter={[Function]}
                popupElement={<OptionList />}
                prefixCls="ant-select"
                transitionName="ant-slide-up"
              >
                <Trigger
                  action={Array []}
                  afterPopupVisibleChange={[Function]}
                  autoDestroy={false}
                  blurDelay={0.15}
                  builtinPlacements={
                    Object {
                      "bottomLeft": Object {
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tl",
                          "bl",
                        ],
                      },
                      "bottomRight": Object {
                        "offset": Array [
                          0,
                          4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "tr",
                          "br",
                        ],
                      },
                      "topLeft": Object {
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "bl",
                          "tl",
                        ],
                      },
                      "topRight": Object {
                        "offset": Array [
                          0,
                          -4,
                        ],
                        "overflow": Object {
                          "adjustX": 0,
                          "adjustY": 1,
                        },
                        "points": Array [
                          "br",
                          "tr",
                        ],
                      },
                    }
                  }
                  defaultPopupVisible={false}
                  destroyPopupOnHide={false}
                  focusDelay={0}
                  getDocument={[Function]}
                  getPopupClassNameFromAlign={[Function]}
                  getTriggerDOMNode={[Function]}
                  hideAction={Array []}
                  mask={false}
                  maskClosable={true}
                  mouseEnterDelay={0}
                  mouseLeaveDelay={0.1}
                  onPopupAlign={[Function]}
                  onPopupVisibleChange={[Function]}
                  popup={
                    <div
                      onMouseEnter={[Function]}
                    >
                      <OptionList />
                    </div>
                  }
                  popupAlign={Object {}}
                  popupClassName=""
                  popupPlacement="bottomLeft"
                  popupStyle={
                    Object {
                      "minWidth": null,
                      "width": null,
                    }
                  }
                  popupTransitionName="ant-slide-up"
                  prefixCls="ant-select-dropdown"
                  showAction={Array []}
                >
                  <Selector
                    OptionList={
                      Object {
                        "$$typeof": Symbol(react.forward_ref),
                        "render": [Function],
                      }
                    }
                    activeDescendantId="rc_select_TEST_OR_SSR_list_0"
                    activeValue={null}
                    className="selectButton"
                    clearIcon={<ForwardRef(CloseCircleFilled) />}
                    displayValues={
                      Array [
                        Object {
                          "disabled": undefined,
                          "key": "NGN",
                          "label": "NGN",
                          "value": "NGN",
                        },
                      ]
                    }
                    domRef={
                      Object {
                        "current": <div
                          class="ant-select-selector"
                        >
                          <span
                            class="ant-select-selection-search"
                          >
                            <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autocomplete="off"
                              class="ant-select-selection-search-input"
                              id="rc_select_TEST_OR_SSR"
                              readonly=""
                              role="combobox"
                              style="opacity: 0;"
                              type="search"
                              unselectable="on"
                              value=""
                            />
                          </span>
                          <span
                            class="ant-select-selection-item"
                            title="NGN"
                          >
                            NGN
                          </span>
                        </div>,
                      }
                    }
                    dropdownClassName=""
                    dropdownMatchSelectWidth={true}
                    emptyOptions={false}
                    id="rc_select_TEST_OR_SSR"
                    inputElement={null}
                    inputIcon={[Function]}
                    key="trigger"
                    notFoundContent={
                      <Context.Consumer>
                        [Function]
                      </Context.Consumer>
                    }
                    omitDomProps={
                      Array [
                        "inputValue",
                      ]
                    }
                    onDisplayValuesChange={[Function]}
                    onRemove={[Function]}
                    onSearch={[Function]}
                    onSearchSplit={[Function]}
                    onSearchSubmit={[Function]}
                    onToggleOpen={[Function]}
                    prefixCls="ant-select"
                    removeIcon={<ForwardRef(CloseOutlined) />}
                    searchValue=""
                    showSearch={false}
                    tokenWithEnter={false}
                    transitionName="ant-slide-up"
                    values={
                      Array [
                        Object {
                          "disabled": undefined,
                          "key": "NGN",
                          "label": "NGN",
                          "value": "NGN",
                        },
                      ]
                    }
                  >
                    <div
                      className="ant-select-selector"
                      onClick={[Function]}
                      onMouseDown={[Function]}
                    >
                      <SingleSelector
                        OptionList={
                          Object {
                            "$$typeof": Symbol(react.forward_ref),
                            "render": [Function],
                          }
                        }
                        activeDescendantId="rc_select_TEST_OR_SSR_list_0"
                        activeValue={null}
                        className="selectButton"
                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                        displayValues={
                          Array [
                            Object {
                              "disabled": undefined,
                              "key": "NGN",
                              "label": "NGN",
                              "value": "NGN",
                            },
                          ]
                        }
                        domRef={
                          Object {
                            "current": <div
                              class="ant-select-selector"
                            >
                              <span
                                class="ant-select-selection-search"
                              >
                                <input
                                  aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                  aria-autocomplete="list"
                                  aria-controls="rc_select_TEST_OR_SSR_list"
                                  aria-haspopup="listbox"
                                  aria-owns="rc_select_TEST_OR_SSR_list"
                                  autocomplete="off"
                                  class="ant-select-selection-search-input"
                                  id="rc_select_TEST_OR_SSR"
                                  readonly=""
                                  role="combobox"
                                  style="opacity: 0;"
                                  type="search"
                                  unselectable="on"
                                  value=""
                                />
                              </span>
                              <span
                                class="ant-select-selection-item"
                                title="NGN"
                              >
                                NGN
                              </span>
                            </div>,
                          }
                        }
                        dropdownClassName=""
                        dropdownMatchSelectWidth={true}
                        emptyOptions={false}
                        id="rc_select_TEST_OR_SSR"
                        inputElement={null}
                        inputIcon={[Function]}
                        inputRef={
                          Object {
                            "current": <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autocomplete="off"
                              class="ant-select-selection-search-input"
                              id="rc_select_TEST_OR_SSR"
                              readonly=""
                              role="combobox"
                              style="opacity: 0;"
                              type="search"
                              unselectable="on"
                              value=""
                            />,
                          }
                        }
                        notFoundContent={
                          <Context.Consumer>
                            [Function]
                          </Context.Consumer>
                        }
                        omitDomProps={
                          Array [
                            "inputValue",
                          ]
                        }
                        onDisplayValuesChange={[Function]}
                        onInputChange={[Function]}
                        onInputCompositionEnd={[Function]}
                        onInputCompositionStart={[Function]}
                        onInputKeyDown={[Function]}
                        onInputMouseDown={[Function]}
                        onInputPaste={[Function]}
                        onRemove={[Function]}
                        onSearch={[Function]}
                        onSearchSplit={[Function]}
                        onSearchSubmit={[Function]}
                        onToggleOpen={[Function]}
                        prefixCls="ant-select"
                        removeIcon={<ForwardRef(CloseOutlined) />}
                        searchValue=""
                        showSearch={false}
                        tokenWithEnter={false}
                        transitionName="ant-slide-up"
                        values={
                          Array [
                            Object {
                              "disabled": undefined,
                              "key": "NGN",
                              "label": "NGN",
                              "value": "NGN",
                            },
                          ]
                        }
                      >
                        <span
                          className="ant-select-selection-search"
                        >
                          <Input
                            activeDescendantId="rc_select_TEST_OR_SSR_list_0"
                            attrs={Object {}}
                            editable={false}
                            id="rc_select_TEST_OR_SSR"
                            inputElement={null}
                            onChange={[Function]}
                            onCompositionEnd={[Function]}
                            onCompositionStart={[Function]}
                            onKeyDown={[Function]}
                            onMouseDown={[Function]}
                            onPaste={[Function]}
                            prefixCls="ant-select"
                            value=""
                          >
                            <input
                              aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                              aria-autocomplete="list"
                              aria-controls="rc_select_TEST_OR_SSR_list"
                              aria-haspopup="listbox"
                              aria-owns="rc_select_TEST_OR_SSR_list"
                              autoComplete="off"
                              className="ant-select-selection-search-input"
                              id="rc_select_TEST_OR_SSR"
                              onChange={[Function]}
                              onCompositionEnd={[Function]}
                              onCompositionStart={[Function]}
                              onKeyDown={[Function]}
                              onMouseDown={[Function]}
                              onPaste={[Function]}
                              readOnly={true}
                              role="combobox"
                              style={
                                Object {
                                  "opacity": 0,
                                }
                              }
                              type="search"
                              unselectable="on"
                              value=""
                            />
                          </Input>
                        </span>
                        <span
                          className="ant-select-selection-item"
                          title="NGN"
                        >
                          NGN
                        </span>
                      </SingleSelector>
                    </div>
                  </Selector>
                </Trigger>
              </SelectTrigger>
              <TransBtn
                className="ant-select-arrow"
                customizeIcon={[Function]}
                customizeIconProps={
                  Object {
                    "focused": false,
                    "loading": undefined,
                    "open": undefined,
                    "searchValue": "",
                    "showSearch": false,
                  }
                }
              >
                <span
                  aria-hidden={true}
                  className="ant-select-arrow"
                  onMouseDown={[Function]}
                  style={
                    Object {
                      "WebkitUserSelect": "none",
                      "userSelect": "none",
                    }
                  }
                  unselectable="on"
                >
                  <ForwardRef(DownOutlined)
                    className="ant-select-suffix"
                  >
                    <AntdIcon
                      className="ant-select-suffix"
                      icon={
                        Object {
                          "icon": Object {
                            "attrs": Object {
                              "focusable": "false",
                              "viewBox": "64 64 896 896",
                            },
                            "children": Array [
                              Object {
                                "attrs": Object {
                                  "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                },
                                "tag": "path",
                              },
                            ],
                            "tag": "svg",
                          },
                          "name": "down",
                          "theme": "outlined",
                        }
                      }
                    >
                      <span
                        aria-label="down"
                        className="anticon anticon-down ant-select-suffix"
                        role="img"
                      >
                        <IconReact
                          icon={
                            Object {
                              "icon": Object {
                                "attrs": Object {
                                  "focusable": "false",
                                  "viewBox": "64 64 896 896",
                                },
                                "children": Array [
                                  Object {
                                    "attrs": Object {
                                      "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                    },
                                    "tag": "path",
                                  },
                                ],
                                "tag": "svg",
                              },
                              "name": "down",
                              "theme": "outlined",
                            }
                          }
                        >
                          <svg
                            aria-hidden="true"
                            data-icon="down"
                            fill="currentColor"
                            focusable="false"
                            height="1em"
                            key="svg-down"
                            viewBox="64 64 896 896"
                            width="1em"
                          >
                            <path
                              d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                              key="svg-down-svg-0"
                            />
                          </svg>
                        </IconReact>
                      </span>
                    </AntdIcon>
                  </ForwardRef(DownOutlined)>
                </span>
              </TransBtn>
            </div>
          </BaseSelect>
        </Select>
      </ForwardRef(InternalSelect)>
      <div
        className="inputButton"
      >
        <Input
          className="w-24"
          onChange={[Function]}
          placeholder="0"
          type="text"
          value=""
        >
          <ClearableLabeledInput
            bordered={true}
            className="w-24"
            element={
              <input
                className="ant-input w-24"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                placeholder="0"
                type="text"
                value=""
              />
            }
            focused={false}
            handleReset={[Function]}
            inputType="input"
            onChange={[Function]}
            placeholder="0"
            prefixCls="ant-input"
            suffix={null}
            triggerFocus={[Function]}
            type="text"
            value=""
          >
            <input
              className="ant-input w-24"
              onBlur={[Function]}
              onChange={[Function]}
              onFocus={[Function]}
              onKeyDown={[Function]}
              placeholder="0"
              type="text"
              value=""
            />
          </ClearableLabeledInput>
        </Input>
      </div>
      <Button
        className="addCurrency"
        onClick={[Function]}
        type="primary"
      >
        <Wave
          disabled={false}
        >
          <button
            className="ant-btn ant-btn-primary addCurrency"
            onClick={[Function]}
            type="button"
          >
            <LoadingIcon
              existIcon={false}
              loading={false}
              prefixCls="ant-btn"
            >
              <CSSMotion
                motionName="ant-btn-loading-icon-motion"
                onAppearActive={[Function]}
                onAppearStart={[Function]}
                onEnterActive={[Function]}
                onEnterStart={[Function]}
                onLeaveActive={[Function]}
                onLeaveStart={[Function]}
                removeOnLeave={true}
                visible={false}
              >
                <DomWrapper />
              </CSSMotion>
            </LoadingIcon>
            <span
              key=".0"
            >
              + Add Currency
            </span>
          </button>
        </Wave>
      </Button>
    </div>
    <h2
      className="text-lg font-medium text-base-gray-200 mt-3 mb-3"
    >
      Selected Currencies
    </h2>
    <div
      className="currencyField"
    >
      <Row
        gutter={
          Array [
            24,
            16,
          ]
        }
      >
        <div
          className="ant-row"
          style={
            Object {
              "marginBottom": -8,
              "marginLeft": -12,
              "marginRight": -12,
              "marginTop": -8,
            }
          }
        >
          <div
            className="mr-3 mb-3"
            key="0"
            span={5}
          >
            <div
              className="currencyButtons"
            >
              <h2
                className="text-gray-500 mb-0 mr-1"
              >
                300
              </h2>
              <h2
                className="text-gray-500 mb-0"
              >
                NGN
              </h2>
              <p
                className="text-base mb-1 ml-2"
                onClick={[Function]}
              >
                x
              </p>
            </div>
          </div>
          <div
            className="mr-3 mb-3"
            key="1"
            span={5}
          >
            <div
              className="currencyButtons"
            >
              <h2
                className="text-gray-500 mb-0 mr-1"
              >
                400
              </h2>
              <h2
                className="text-gray-500 mb-0"
              >
                GHC
              </h2>
              <p
                className="text-base mb-1 ml-2"
                onClick={[Function]}
              >
                x
              </p>
            </div>
          </div>
        </div>
      </Row>
    </div>
  </div>
</CustomCheckoutSelect>
`;
