// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Button :  renders a snapshot of <Button /> when the loading prop is false or not supplied 1`] = `
<button
  className="jsx-1869262872 "
  onClick={[Function]}
>
   
  Submit
</button>
`;

exports[`Button :  renders a snapshot of <Button /> when the loading prop is true and disabled prop is false 1`] = `
<button
  className="jsx-1869262872 "
  disabled={true}
  onClick={[Function]}
>
  Loading...
</button>
`;

exports[`Button :  renders a snapshot of <Button /> when the loading prop is true and disabled prop is false 2`] = `
<button
  className="jsx-1869262872 "
  disabled={true}
  onClick={[Function]}
>
   
  Submit
</button>
`;

exports[`Button :  renders a snapshot of <Button /> when the loading prop is true and disabled prop is false 3`] = `
<button
  className="jsx-1869262872 "
  disabled={true}
  onClick={[Function]}
>
  Loading...
</button>
`;

exports[`CustomSelect :  renders a snapshot of <CustomSelect  /> with mock Prop values and  the isMultiple prop set at false 1`] = `
<div
  className="jsx-190698999 input-wrapper"
>
  <div
    className="jsx-190698999 input-plus-label-wrapper"
  >
    <label
      className="jsx-190698999"
    >
      mockLabel
    </label>
    <div
      className=" css-2b097c-container"
      onKeyDown={[Function]}
    >
      <span
        aria-atomic="false"
        aria-live="polite"
        aria-relevant="additions text"
        className="css-1f43avz-a11yText-A11yText"
      />
      <div
        className=" css-lzi6q7-control"
        onMouseDown={[Function]}
        onTouchEnd={[Function]}
      >
        <div
          className=" css-14100a9-ValueContainer"
        >
          <div
            className=" css-1wa3eu0-placeholder"
          >
            mockPlaceholder
          </div>
          <div
            className="css-b8ldur-Input"
          >
            <div
              className=""
              style={
                Object {
                  "display": "inline-block",
                }
              }
            >
              <input
                aria-autocomplete="list"
                autoCapitalize="none"
                autoComplete="off"
                autoCorrect="off"
                disabled={false}
                id="react-select-2-input"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                spellCheck="false"
                style={
                  Object {
                    "background": 0,
                    "border": 0,
                    "boxSizing": "content-box",
                    "color": "inherit",
                    "fontSize": "inherit",
                    "label": "input",
                    "opacity": 1,
                    "outline": 0,
                    "padding": 0,
                    "width": "1px",
                  }
                }
                tabIndex="0"
                type="text"
                value=""
              />
              <div
                style={
                  Object {
                    "height": 0,
                    "left": 0,
                    "overflow": "scroll",
                    "position": "absolute",
                    "top": 0,
                    "visibility": "hidden",
                    "whiteSpace": "pre",
                  }
                }
              >
                
              </div>
            </div>
          </div>
        </div>
        <div
          className=" css-1hb7zxy-IndicatorsContainer"
        >
          <span
            className=" css-62wm9a-IndicatorSeparator"
          />
          <div
            aria-hidden="true"
            className=" css-tlfecz-indicatorContainer"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
          >
            <svg
              fill="none"
              height="16"
              viewBox="0 0 11 16"
              width="11"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M0.5 10.5L5.5 15.5L10.5 10.5H0.5Z"
                fill="#595959"
              />
              <path
                d="M0.5 5.5L5.5 0.5L10.5 5.5H0.5Z"
                fill="#595959"
              />
            </svg>
          </div>
        </div>
      </div>
    </div>
    <span
      className="jsx-190698999 error"
    >
      mockError
    </span>
  </div>
</div>
`;

exports[`CustomSelect :  renders a snapshot of <CustomSelect  /> with mock Prop values, a test width of 50 and  the isMultiple prop set at false 1`] = `
<div
  className="jsx-190698999 input-wrapper"
>
  <div
    className="jsx-190698999 input-plus-label-wrapper"
  >
    <label
      className="jsx-190698999"
    >
      mockLabel
    </label>
    <div
      className=" css-2b097c-container"
      onKeyDown={[Function]}
    >
      <span
        aria-atomic="false"
        aria-live="polite"
        aria-relevant="additions text"
        className="css-1f43avz-a11yText-A11yText"
      />
      <div
        className=" css-lzi6q7-control"
        onMouseDown={[Function]}
        onTouchEnd={[Function]}
      >
        <div
          className=" css-14100a9-ValueContainer"
        >
          <div
            className=" css-1wa3eu0-placeholder"
          >
            mockPlaceholder
          </div>
          <div
            className="css-b8ldur-Input"
          >
            <div
              className=""
              style={
                Object {
                  "display": "inline-block",
                }
              }
            >
              <input
                aria-autocomplete="list"
                autoCapitalize="none"
                autoComplete="off"
                autoCorrect="off"
                disabled={false}
                id="react-select-2-input"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                spellCheck="false"
                style={
                  Object {
                    "background": 0,
                    "border": 0,
                    "boxSizing": "content-box",
                    "color": "inherit",
                    "fontSize": "inherit",
                    "label": "input",
                    "opacity": 1,
                    "outline": 0,
                    "padding": 0,
                    "width": "1px",
                  }
                }
                tabIndex="0"
                type="text"
                value=""
              />
              <div
                style={
                  Object {
                    "height": 0,
                    "left": 0,
                    "overflow": "scroll",
                    "position": "absolute",
                    "top": 0,
                    "visibility": "hidden",
                    "whiteSpace": "pre",
                  }
                }
              >
                
              </div>
            </div>
          </div>
        </div>
        <div
          className=" css-1hb7zxy-IndicatorsContainer"
        >
          <span
            className=" css-62wm9a-IndicatorSeparator"
          />
          <div
            aria-hidden="true"
            className=" css-tlfecz-indicatorContainer"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
          >
            <svg
              fill="none"
              height="16"
              viewBox="0 0 11 16"
              width="11"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M0.5 10.5L5.5 15.5L10.5 10.5H0.5Z"
                fill="#595959"
              />
              <path
                d="M0.5 5.5L5.5 0.5L10.5 5.5H0.5Z"
                fill="#595959"
              />
            </svg>
          </div>
        </div>
      </div>
    </div>
    <span
      className="jsx-190698999 error"
    >
      mockError
    </span>
  </div>
</div>
`;

exports[`CustomSelect :  renders a snapshot of <CustomSelect  /> with mock Prop values, a test width of 50 and  the isMultiple prop set at true 1`] = `
<div
  className="jsx-190698999 input-wrapper"
>
  <div
    className="jsx-190698999 input-plus-label-wrapper"
  >
    <label
      className="jsx-190698999"
    >
      mockLabel
    </label>
    <div
      className=" css-2b097c-container"
      onKeyDown={[Function]}
    >
      <span
        aria-atomic="false"
        aria-live="polite"
        aria-relevant="additions text"
        className="css-1f43avz-a11yText-A11yText"
      />
      <div
        className=" css-lzi6q7-control"
        onMouseDown={[Function]}
        onTouchEnd={[Function]}
      >
        <div
          className=" css-14100a9-ValueContainer"
        >
          <div
            className=" css-1wa3eu0-placeholder"
          >
            mockPlaceholder
          </div>
          <div
            className="css-b8ldur-Input"
          >
            <div
              className=""
              style={
                Object {
                  "display": "inline-block",
                }
              }
            >
              <input
                aria-autocomplete="list"
                autoCapitalize="none"
                autoComplete="off"
                autoCorrect="off"
                disabled={false}
                id="react-select-3-input"
                onBlur={[Function]}
                onChange={[Function]}
                onFocus={[Function]}
                spellCheck="false"
                style={
                  Object {
                    "background": 0,
                    "border": 0,
                    "boxSizing": "content-box",
                    "color": "inherit",
                    "fontSize": "inherit",
                    "label": "input",
                    "opacity": 1,
                    "outline": 0,
                    "padding": 0,
                    "width": "1px",
                  }
                }
                tabIndex="0"
                type="text"
                value=""
              />
              <div
                style={
                  Object {
                    "height": 0,
                    "left": 0,
                    "overflow": "scroll",
                    "position": "absolute",
                    "top": 0,
                    "visibility": "hidden",
                    "whiteSpace": "pre",
                  }
                }
              >
                
              </div>
            </div>
          </div>
        </div>
        <div
          className=" css-1hb7zxy-IndicatorsContainer"
        >
          <span
            className=" css-62wm9a-IndicatorSeparator"
          />
          <div
            aria-hidden="true"
            className=" css-tlfecz-indicatorContainer"
            onMouseDown={[Function]}
            onTouchEnd={[Function]}
          >
            <svg
              fill="none"
              height="16"
              viewBox="0 0 11 16"
              width="11"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M0.5 10.5L5.5 15.5L10.5 10.5H0.5Z"
                fill="#595959"
              />
              <path
                d="M0.5 5.5L5.5 0.5L10.5 5.5H0.5Z"
                fill="#595959"
              />
            </svg>
          </div>
        </div>
      </div>
    </div>
    <span
      className="jsx-190698999 error"
    >
      mockError
    </span>
  </div>
</div>
`;

exports[`TextArea :  renders a snapshot of <TextArea /> with the disabled prop set to false and no labelExtra supplied 1`] = `
Array [
  <label
    className="jsx-1326306561"
  >
    mockLabel
     
  </label>,
  <textarea
    className="jsx-1326306561 "
    name="mockName"
    onBlur={[Function]}
    onChange={[Function]}
    placeholder="mockPlaceholder"
    rows="8"
    type="text"
    value="mockValue"
  />,
]
`;

exports[`TextArea :  renders a snapshot of <TextArea /> with the disabled prop set to false and no labelExtra supplied 2`] = `
Array [
  <label
    className="jsx-1326306561"
  >
    mockLabel
     
  </label>,
  <textarea
    className="jsx-1326306561 "
    name="mockName"
    onBlur={[Function]}
    onChange={[Function]}
    placeholder="mockPlaceholder"
    rows="8"
    type="text"
    value="mockValue"
  />,
]
`;

exports[`TextArea :  renders a snapshot of <TextArea /> with the disabled prop set to false and with a mock labelExtra supplied 1`] = `
Array [
  <label
    className="jsx-1326306561"
  >
    mockLabel
     
    <span
      className="jsx-1326306561"
    >
      - 
      mockLabelExtra
    </span>
  </label>,
  <textarea
    className="jsx-1326306561 "
    name="mockName"
    onBlur={[Function]}
    onChange={[Function]}
    placeholder="mockPlaceholder"
    rows="8"
    type="text"
    value="mockValue"
  />,
]
`;

exports[`TextArea :  renders a snapshot of <TextArea /> with the disabled prop set to true and a mock labelExtra supplied 1`] = `
Array [
  <label
    className="jsx-1326306561"
  >
    mockLabel
     
    <span
      className="jsx-1326306561"
    >
      - 
      mockLabelExtra
    </span>
  </label>,
  <textarea
    className="jsx-1326306561 "
    disabled={true}
    name="mockName"
    onBlur={[Function]}
    onChange={[Function]}
    placeholder="mockPlaceholder"
    rows="8"
    type="text"
    value="mockValue"
  />,
]
`;

exports[`TextArea :  renders a snapshot of <TextArea /> with the disabled prop set to true and no labelExtra supplied 1`] = `
Array [
  <label
    className="jsx-1326306561"
  >
    mockLabel
     
  </label>,
  <textarea
    className="jsx-1326306561 "
    disabled={true}
    name="mockName"
    onBlur={[Function]}
    onChange={[Function]}
    placeholder="mockPlaceholder"
    rows="8"
    type="text"
    value="mockValue"
  />,
]
`;

exports[`TextInput :  renders a snapshot of <TextInput /> with mock Props  and disableBtn at false 1`] = `
Array [
  <label
    className="jsx-2372179518"
  >
    mockLabel
     
  </label>,
  <input
    className="jsx-2372179518 "
    name="mockName"
    onBlue={[MockFunction]}
    onBlur={[Function]}
    onChange={[Function]}
    placeholder="mockPlaceholder"
    type="text"
    value="mockValue"
  />,
]
`;

exports[`TextInput :  renders a snapshot of <TextInput /> with mock Props  and disableBtn at true 1`] = `
Array [
  <label
    className="jsx-2372179518"
  >
    mockLabel
     
    <span
      className="jsx-2372179518"
    >
      - 
      mockLabelExtra
    </span>
  </label>,
  <input
    className="jsx-2372179518 "
    disabled={true}
    name="mockName"
    onBlue={[MockFunction]}
    onBlur={[Function]}
    onChange={[Function]}
    placeholder="mockPlaceholder"
    type="text"
    value="mockValue"
  />,
]
`;

exports[`TextInput :  renders a snapshot of <TextInput /> with mock Props and disableBtn at false 1`] = `
Array [
  <label
    className="jsx-2372179518"
  >
    mockLabel
     
    <span
      className="jsx-2372179518"
    >
      - 
      mocklabelExtra
    </span>
  </label>,
  <input
    className="jsx-2372179518 "
    disabled={false}
    name="mockName"
    onBlue={[MockFunction]}
    onBlur={[Function]}
    onChange={[Function]}
    placeholder="mockPlaceholder"
    type="text"
    value="mockValue"
  />,
]
`;
